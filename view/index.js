// Generated by LiveScript 1.5.0
'use strict';
w3ui && w3ui.ready(function(){
  var M, V, P;
  M = w3ui.PROXY({
    nav: [
      {
        id: 'wa'
      }, {
        id: 'view'
      }, {
        id: 'menu'
      }, {
        id: ''
      }, {
        id: ''
      }
    ],
    sav: [{}, {}, {}, {}],
    authorized: true
  }, {
    init: function(obj){
      var a;
      a = obj.nav;
      obj.sav.forEach(function(save, level){
        save[''] = w3ui.CLONE(a.slice(level + 1));
      });
      return obj;
    },
    set: function(obj, k, v, prx){
      var a, b, c, d;
      if (typeof k !== 'string') {
        return true;
      }
      a = parseInt(k);
      if (isNaN(a)) {
        obj[k] = v;
        return true;
      }
      k = a;
      a = obj.nav;
      b = obj.sav;
      c = a[k];
      d = k < b.length ? b[k] : null;
      if (c.id === v && v === '') {
        return true;
      }
      if (c.id === v) {
        v = '';
      }
      if (d) {
        d[c.id] = a.slice(k + 1);
        a.splice(k + 1);
        a = a.concat(w3ui.CLONE(d[v]));
      }
      c.id = v;
      return true;
    },
    get: function(obj, p, prx){
      var k;
      k = parseInt(p);
      if (!isNaN(k)) {
        return obj.nav[k].id;
      }
      if (p in obj) {
        return obj[p];
      }
      return null;
    }
  });
  V = {
    init: function(model){
      var templ, init, render, attach, this$ = this;
      templ = w3ui('template', true);
      templ = templ[0].content;
      init = function(id, node, parent, level, tid){
        var cfg, a, b, own$ = {}.hasOwnProperty;
        cfg = node.cfg;
        if (level > 0) {
          tid = tid + '-' + id;
        }
        cfg.id = id;
        cfg.parent = parent;
        cfg.level = level;
        cfg.nav = model.nav[level];
        if (cfg.render !== undefined) {
          cfg.render = render.bind(node, cfg.render);
        }
        if (cfg.attach) {
          cfg.attach = attach.bind(node, cfg.attach);
        }
        cfg.template = templ.querySelector(tid);
        cfg.data = {};
        cfg.show && (cfg.show = cfg.show.map(function(a){
          if (typeof a === 'object') {
            return a;
          }
          return a.bind(node);
        }));
        cfg.hide && (cfg.hide = cfg.hide.map(function(a){
          if (typeof a === 'object') {
            return a;
          }
          return a.bind(node);
        }));
        for (a in node) if (own$.call(node, a)) {
          b = node[a];
          if (a !== 'cfg' && b && b.cfg) {
            init(a, b, node, level + 1, tid);
          }
        }
        return true;
      };
      render = function(template, old){
        var id, a, b, c, d;
        old == null && (old = '');
        id = this.cfg.nav.id;
        if (!this.cfg.node) {
          this.cfg.node = w3ui('#' + this.cfg.id);
        }
        a = this.cfg.parent;
        b = !a || a.cfg.nav.id === this.cfg.id ? id : '';
        if (!b && id && (c = a[a.cfg.nav.id][id])) {
          this.cfg.context = c;
        }
        if (!template || !id) {
          return true;
        }
        if (!this.cfg.node) {
          return false;
        }
        if (b) {
          a = this[id].cfg.template.innerHTML;
          c = this[id];
        } else {
          a = this.cfg.template.querySelector('#' + id).innerHTML;
          c = this[id].render.call(c);
        }
        a = Mustache.render(a, c);
        if (a && b) {
          if (old) {
            d = document.createElement('template');
            d.innerHTML = a;
            d = w3ui('#' + b, false, d.content);
            this.cfg.node.node.prepend(d[0]);
            c.cfg.node = d;
          } else {
            this.cfg.node[0].innerHTML = a;
            c.cfg.node = w3ui('#' + b);
          }
        } else {
          this.cfg.node[0].innerHTML = a;
        }
        return true;
      };
      attach = function(event){
        var a, b, x, e, i$, len$, d, c, ref$, own$ = {}.hasOwnProperty;
        if (!this.cfg.node) {
          return true;
        }
        if (event === true) {
          if (!(a = this.cfg.nav.id) || !(b = this[a])) {
            return true;
          }
          event = b.attach;
        }
        x = /^key.+/;
        e = [];
        for (a in event) if (own$.call(event, a)) {
          b = event[a];
          if (!Array.isArray(b)) {
            b = [b];
          }
          for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
            d = b[i$];
            c = d.el
              ? document.querySelectorAll('#' + this.cfg.id + ' ' + d.el)
              : d.el === ''
                ? [this.cfg.node[0]]
                : [document];
            d.preventDefault = !x.test(a);
            d = P.event.bind(this, d);
            e.push([c, a, d]);
          }
        }
        if (!e.length) {
          return true;
        }
        this.cfg.detach = function(){
          var i$, ref$, len$, ref1$, a, b, c;
          for (i$ = 0, len$ = (ref$ = e).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], a = ref1$[0], b = ref1$[1], c = ref1$[2];
            a.forEach(fn$);
          }
          delete this.detach;
          return true;
          function fn$(a){
            a.removeEventListener(b, c);
          }
        };
        this.cfg.detach.data = {};
        for (i$ = 0, len$ = e.length; i$ < len$; ++i$) {
          ref$ = e[i$], a = ref$[0], b = ref$[1], c = ref$[2];
          a.forEach(fn$);
        }
        return true;
        function fn$(a){
          a.addEventListener(b, c);
        }
      };
      this.animation = this.animation();
      this.el.$data = this.ui;
      this.el.$model = model;
      return init('ui', this.ui, null, 0, '#t');
    },
    animation: function(){
      var addTweens, this$ = this;
      addTweens = function(node, timeline, source){
        source && source.forEach(function(a){
          var b;
          switch (typeof a) {
          case 'object':
            if (a.tween) {
              b = w3ui.CLONE(a.tween);
              if (a.duration < 0.0001) {
                timeline.set(node, b);
              } else {
                timeline.to(node, a.duration, b);
              }
            } else {
              timeline.addPause(a.duration);
            }
            break;
          case 'function':
            timeline.add(a);
          }
        });
      };
      return {
        hide: function(id, onComplete){
          var list, a, b;
          if (!id || !(list = this$.list(id)) || !list.length) {
            onComplete();
            return;
          }
          list = list.slice(1);
          list.reverse();
          a = new TimelineLite({
            paused: true
          });
          b = '';
          list.forEach(function(node){
            var c;
            if (!(node = this.cfg.node)) {
              return;
            }
            c = new TimelineLite({
              paused: true
            });
            addTweens(node, c, this.cfg.hide);
            if (!b || b !== 'L' + this.cfg.level) {
              b = 'L' + this.cfg.level;
              a.addLabel(b);
            }
            a.add(c.play(), b);
          });
          a.add(onComplete);
          a.play();
        },
        show: function(id1, id0, onComplete){
          var node1, node0, list, parent, turn, old, a, b;
          node1 = this$.el[id1];
          node0 = this$.el[id0];
          list = this$.list(id1);
          parent = node1.cfg.parent;
          turn = null;
          old = null;
          if (id0) {
            turn = parent.cfg.turn;
            old = parent.cfg.node.query('#' + id0, 0, true);
          }
          a = new TimelineLite({
            paused: true
          });
          if (turn) {
            list = list.slice(1);
            if (node0.cfg.turn || node1.cfg.turn) {
              turn = node1.cfg.turn
                ? node1.cfg.turn
                : node0.cfg.turn;
            }
            b = new TimelineLite({
              paused: true
            });
            addTweens(old, b, turn.off);
            a.add(b.play(), 0);
            b = new TimelineLite({
              paused: true
            });
            addTweens(node1.cfg.node, b, turn.on);
            a.add(b.play(), 0);
          }
          old && a.add(function(){
            parent.cfg.node[0].removeChild(old);
          });
          list = list.reduce(function(a, b){
            if (b.cfg.node && b.cfg.show) {
              a.push(b);
            }
            return a;
          }, []);
          b = '';
          list.forEach(function(el){
            var c;
            el = el.cfg;
            c = new TimelineLite({
              paused: true
            });
            addTweens(el.node, c, el.show);
            if (!b || b !== 'L' + el.level) {
              b = 'L' + el.level;
              a.addLabel(b);
            }
            a.add(c.play(), b);
            true;
          });
          a.add(onComplete);
          a.play();
        }
      };
    },
    el: w3ui.PROXY(null, {
      get: function(obj, id, prx){
        var root, a, b, k, v, own$ = {}.hasOwnProperty;
        if (obj.cfg.id === id) {
          return obj;
        }
        if (!(root = prx.$model[0])) {
          return null;
        }
        if (!(obj = obj[root])) {
          return null;
        }
        if (!id || obj.cfg.id === id) {
          return obj;
        }
        if (obj[id] && obj[id].cfg) {
          return obj[id];
        }
        a = [obj];
        while (a.length) {
          b = a.pop();
          for (k in b) if (own$.call(b, k)) {
            v = b[k];
            if (k !== 'cfg' && v && v.cfg) {
              if (v[id] && v[id].cfg) {
                return v[id];
              }
              a.push(v);
            }
          }
        }
        return null;
      }
    }),
    list: function(id){
      var x, a, b;
      x = [];
      if (!(a = this.el[id])) {
        return x;
      }
      b = [a];
      while (b.length) {
        x.push(b);
        b = b.map(fn$);
        b = b.reduce(fn1$, []);
      }
      x = x.reduce(function(a, b){
        return a.concat(b);
      }, []);
      return x;
      function fn$(node){
        var c, a, b;
        c = [];
        for (a in node) {
          b = node[a];
          if (a !== 'cfg' && b && b.cfg) {
            c.push(b);
          }
        }
        return c;
      }
      function fn1$(a, b){
        return a.concat(b);
      }
    },
    call: function(method, id){
      var param, res$, i$, to$, me, opts, list;
      id == null && (id = '');
      res$ = [];
      for (i$ = 2, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      param = res$;
      me = this.call;
      !me.opts && (me.opts = {
        render: {
          active: false
        },
        init: {
          active: true,
          cleanup: true
        },
        resize: {
          active: true
        },
        refresh: {
          active: true
        },
        attach: {
          active: true
        },
        detach: {
          active: true,
          reverse: true
        },
        finit: {
          active: true,
          reverse: true
        }
      });
      if (!(opts = me.opts[method])) {
        return false;
      }
      if (!(list = this.list(id))) {
        return false;
      }
      if (opts.reverse) {
        list.reverse();
      }
      list = list.reduce(function(a, node){
        if (node.cfg[method]) {
          a.push(node);
        }
        return a;
      }, []);
      if (opts.cleanup) {
        list.forEach(function(node){
          var a, b;
          a = node.cfg;
          if (!a.node) {
            return;
          }
          b = a.context ? a.context.cfg : a;
          if (b.parent.cfg.nav.id === b.id) {
            return;
          }
          a.node = null;
        });
      }
      if (opts.active) {
        list = list.reduce(function(a, node){
          if (node.cfg.node) {
            a.push(node);
          }
          return a;
        }, []);
        true;
      }
      if (!param.length) {
        param = false;
      }
      return list.every(function(node){
        if (param) {
          return node.cfg[method].apply(node, param);
        } else {
          return node.cfg[method].call(node);
        }
      });
    },
    ui: {
      cfg: {
        id: 'ui',
        node: w3ui('#ui'),
        parent: null,
        context: null,
        data: {},
        level: 0,
        nav: null,
        render: true
      },
      wa: {
        cfg: {
          fontSizeMin: 0,
          fontSizeMax: 0,
          init: function(){
            this.cfg.fontSizeMin = parseInt(this.cfg.node.style.fSizeMin);
            this.cfg.fontSizeMax = parseInt(this.cfg.node.style.fSizeMax);
            return true;
          }
        },
        view: {
          cfg: {
            render: true,
            finit: function(){
              var a, b;
              a = this.cfg.nav.id;
              b = this.cfg.node;
              if (!b.hasClass(a)) {
                b.removeClass();
                b.addClass(a);
              }
              return true;
            },
            turn: {
              on: [
                {
                  duration: 2
                }, {
                  duration: 0,
                  tween: {
                    className: '+=color',
                    visibility: true,
                    opacity: 0,
                    scale: 0.5
                  }
                }, {
                  duration: 8,
                  tween: {
                    className: '-=color',
                    opacity: 1,
                    scale: 1
                  }
                }
              ],
              off: [
                {
                  duration: 2,
                  tween: {
                    className: '+=color'
                  }
                }, {
                  duration: 8,
                  tween: {
                    scale: 1.5,
                    opacity: 0
                  }
                }
              ]
            }
          },
          menu: {
            cfg: {
              render: true,
              init: function(){
                var a, b;
                if (!this.cfg.data.menu) {
                  this.cfg.data.menu = this.cfg.node.query('.box');
                  this.cfg.data.time = this.cfg.show[1].duration;
                }
                while ((a = this.cfg.nav.current) === undefined) {
                  this.cfg.nav.current = 0;
                }
                while (!(b = this.cfg.nav.currentItem)) {
                  this.cfg.nav.currentItem = this.data.map(fn$);
                }
                this.cfg.data.menu['class'][a].add('active');
                return true;
                function fn$(){
                  return 0;
                }
              },
              refresh: function(){
                var data, a, i$, to$, b, c, d, e, this$ = this;
                data = this.cfg.data;
                if (!data.box) {
                  a = this.cfg.nav.current;
                  data.box = data.menu.eq(a);
                  data.btn = data.box.query('.button');
                  for (i$ = 0, to$ = data.btn.length - 1; i$ <= to$; ++i$) {
                    b = i$;
                    data.btn[b].dataset.num = b;
                    data.btn[b].dataset.id = this.data[a].list[b].id;
                  }
                  a = this.cfg.nav.currentItem[this.cfg.nav.current];
                  data.btn['class'][a].add('active');
                }
                if (!data.slide) {
                  a = this.cfg.nav.current || 0;
                  b = data.menu.length - 1;
                  c = [a > 0 ? a - 1 : b, a < b ? a + 1 : 0];
                  a = [[data.menu[a], data.menu[c[0]]], [data.menu[a], data.menu[c[1]]]];
                  c = [['0%', '100%', '-100%', '0%'], ['0%', '-100%', '100%', '0%']];
                  data.slide = a.map(function(a, index){
                    var b;
                    b = new TimelineLite({
                      paused: true,
                      data: {
                        complete: function(){
                          data.menu.propRemove('style');
                          delete data.slide;
                        }
                      }
                    });
                    b.set(a[0], {
                      transformOrigin: '0% 50%',
                      x: c[index][0],
                      zIndex: 1
                    });
                    b.set(a[1], {
                      transformOrigin: '0% 50%',
                      x: c[index][2],
                      zIndex: 2
                    });
                    b.set(a, {
                      visibility: 'visible'
                    });
                    b.addLabel('s1');
                    b.to(a[0], data.time, {
                      x: c[index][1]
                    }, 's1');
                    b.to(a[1], data.time, {
                      x: c[index][3]
                    }, 's1');
                    b.set(a[0], {
                      className: '-=active'
                    });
                    b.set(a[1], {
                      className: '+=active'
                    });
                    return b;
                  });
                }
                if (!data.drag) {
                  a = V.el.console.cfg.data.slide;
                  b = data.slide;
                  c = [
                    new TimelineLite({
                      paused: true,
                      ease: Power3.easeInOut
                    }), new TimelineLite({
                      paused: true,
                      ease: Power3.easeInOut
                    })
                  ];
                  d = function(){
                    var a, b;
                    a = 'drag';
                    b = !this$.cfg.node.hasClass(a);
                    this$.cfg.node.toggleClass(a, b);
                  };
                  e = function(index){
                    return function(){
                      this$.cfg.node.removeClass('drag');
                      a[index].data.complete();
                      b[index].data.complete();
                      delete data.box;
                      delete data.drag;
                    };
                  };
                  c[0].add(d);
                  c[0].add(a[0].play(), 0);
                  c[0].add(b[0].play(), 0);
                  c[0].add(e(0));
                  c[1].add(d);
                  c[1].add(a[1].play(), 0);
                  c[1].add(b[1].play(), 0);
                  c[1].add(e(1));
                  data.drag = c;
                }
                return true;
              },
              show: [
                {
                  duration: 0,
                  tween: {
                    visibility: 'visible',
                    scale: 0
                  }
                }, {
                  duration: 0.8,
                  tween: {
                    scale: 1,
                    ease: Back.easeOut
                  }
                }, function(){
                  this.cfg.data.menu.addClass('attached');
                }
              ],
              hide: [
                function(){
                  this.cfg.data.menu.removeClass('attached');
                }, {
                  duration: 0.8,
                  tween: {
                    scale: 0,
                    ease: Power3.easeIn
                  }
                }
              ],
              attach: {
                click: {
                  el: '.button'
                },
                pointerover: {
                  el: '.button'
                },
                pointerdown: {
                  el: ''
                },
                pointermove: {
                  el: ''
                },
                pointerup: {
                  el: ''
                },
                keydown: {
                  keys: ['ArrowUp', 'ArrowDown']
                }
              }
            },
            data: [
              {
                id: 'card',
                name: 'Картотека',
                list: [
                  {
                    id: 'address',
                    name: 'Адреса'
                  }, {
                    id: 'counterparty',
                    name: 'Контрагенты'
                  }
                ]
              }, {
                id: 'income',
                name: 'Входящие',
                list: [
                  {
                    id: 'accrual',
                    name: 'Начисления'
                  }, {
                    id: 'payment',
                    name: 'Оплата'
                  }, {
                    id: 'storno',
                    name: 'Сторно'
                  }
                ]
              }, {
                id: 'outcome',
                name: 'Исходящие',
                list: [
                  {
                    id: 'calc',
                    name: 'Расчеты'
                  }, {
                    id: 'document',
                    name: 'Отчеты'
                  }
                ]
              }
            ]
          },
          address: {
            cfg: {
              refresh: function(){
                return true;
              },
              show: [
                {
                  duration: 0,
                  tween: {
                    visibility: 'visible',
                    scale: 0
                  }
                }, {
                  duration: 0.8,
                  tween: {
                    scale: 1,
                    ease: Back.easeOut
                  }
                }
              ],
              hide: [{
                duration: 0.8,
                tween: {
                  scale: 0,
                  ease: Back.easeIn
                }
              }]
            },
            tab: [
              {
                id: 'a0',
                name: 'квартира'
              }, {
                id: 'a1',
                name: 'дом'
              }, {
                id: 'a2',
                name: 'улица'
              }, {
                id: 'a3',
                name: 'район'
              }, {
                id: 'a4',
                name: 'город'
              }
            ]
          },
          config: {
            empty: true
          }
        },
        header: {
          cfg: {
            render: false,
            init: function(){
              var c, d, a, b;
              c = this.cfg;
              d = c.data;
              if (!d.title) {
                d.title = c.node.query('.title');
                d.mode = c.node.query('.mode .button');
                d.config = c.node.query('.config .button');
              }
              c.show[1].tween.className = '+=on ' + c.nav.id;
              a = c.context ? c.context.cfg.id : '';
              d.title.$text = a ? this.title[a] : '';
              d.title.html(d.title.$text);
              if (a) {
                c = c.template;
                b = a === 'menu' ? 'return' : 'menu';
                d.mode.$text = this.mode[b];
                d.mode.$icon = c.querySelector('#' + b).innerHTML;
                b = a === 'config' ? 'close' : 'config';
                d.config.$text = this.config[b];
                d.config.$icon = c.querySelector('#' + b).innerHTML;
              }
              d.mode.toggleClass('disabled', !a);
              d.config.toggleClass('disabled', !a);
              d.buttonSwitch = function(){
                var a;
                a = [
                  new TimelineLite({
                    paused: true,
                    ease: Power2.easeIn
                  }), new TimelineLite({
                    paused: true,
                    ease: Power2.easeIn
                  })
                ];
                a = [[a[0], 'text', 'icon'], [a[1], 'icon', 'text']];
                a = a.map(function(a, index){
                  a[0].to(d.mode, 0.4, {
                    className: '-=' + a[1],
                    scale: 0
                  }, 0);
                  a[0].to(d.config, 0.4, {
                    className: '-=' + a[1],
                    scale: 0
                  }, 0);
                  a[0].add((function(a){
                    return function(){
                      d.mode[0].innerHTML = d.mode[a];
                      d.config[0].innerHTML = d.config[a];
                    };
                  }.call(this, '$' + a[2])));
                  a[0].addLabel('L1');
                  a[0].to(d.mode, 0.4, {
                    className: '+=' + a[2],
                    scale: 1
                  }, 'L1');
                  a[0].to(d.config, 0.4, {
                    className: '+=' + a[2],
                    scale: 1
                  }, 'L1');
                  a[0].add(function(){
                    d.mode.propRemove('style');
                    d.config.propRemove('style');
                  });
                  return a[0];
                });
                return a;
              }();
              d.buttonResize = function(){
                var a, b, useIcon;
                a = d.buttonResize;
                b = d.buttonSwitch.some(function(a){
                  return a.isActive();
                });
                if (b || d.mode.style.fontSize < 0.0001) {
                  if (a.timer) {
                    window.clearTimeout(a.timer);
                  }
                  a.timer = window.setTimeout(d.buttonResize, 500);
                  return;
                }
                useIcon = [d.mode, d.config].some(function(el){
                  var a;
                  if (el.$text) {
                    a = el.box.textMetrics(el.$text).width;
                    if (el.box.innerWidth < a) {
                      return true;
                    }
                  }
                  return false;
                });
                a = d.mode['class'][0];
                if (useIcon && !a.contains('icon')) {
                  a = 0;
                } else if (!useIcon && !a.contains('text')) {
                  a = 1;
                } else {
                  return;
                }
                a = d.buttonSwitch[a];
                a.play(0);
              };
              return true;
            },
            resize: function(){
              var c, d, a, b;
              c = V.el.wa.cfg;
              d = this.cfg.data;
              a = d.title.box.fontSize(d.title.$text);
              b = [c.fontSizeMin, c.fontSizeMax];
              if (a < b[0]) {
                a = 0;
              }
              if (a > b[1]) {
                a = b[1];
              }
              c.node.style.fSize0 = a + 'px';
              d.buttonResize();
              return true;
            },
            show: [
              {
                duration: 0,
                tween: {
                  visibility: 'visible'
                }
              }, {
                duration: 0.8,
                tween: {
                  className: '',
                  opacity: 1,
                  ease: Power3.easeOut
                }
              }, function(){
                this.cfg.resize.call(this);
              }
            ],
            hide: [
              {
                duration: 0.2,
                tween: {
                  opacity: 0,
                  ease: Power3.easeIn
                }
              }, {
                duration: 0.4,
                tween: {
                  className: '',
                  ease: Power3.easeIn
                }
              }
            ]
          },
          attach: {
            click: [
              {
                el: '.back .button',
                id: 'back'
              }, {
                el: '.config .button',
                id: 'config'
              }
            ]
          },
          title: {
            menu: 'Главное меню',
            address: 'Картотека адресов',
            config: 'Конфигурация'
          },
          mode: {
            menu: 'меню',
            'return': 'возврат'
          },
          config: {
            config: 'настройки',
            close: 'закрыть'
          }
        },
        console: {
          cfg: {
            render: true,
            attach: true,
            init: function(){
              this.cfg.show[1].tween.className = '+=on ' + this.cfg.nav.id;
              return true;
            },
            resize: function(){
              var a, ref$, own$ = {}.hasOwnProperty;
              for (a in ref$ = this.cfg.data) if (own$.call(ref$, a)) {
                delete this.cfg.data[a];
              }
              return this.cfg.refresh.call(this);
            },
            refresh: function(){
              var a, b;
              a = this.cfg.nav.id;
              b = this[a];
              if (!b || !b.refresh) {
                return true;
              }
              return b.refresh.call(this, this.cfg.data);
            },
            show: [
              {
                duration: 0,
                tween: {
                  visibility: 'visible'
                }
              }, {
                duration: 0.8,
                tween: {
                  className: '',
                  opacity: 1,
                  ease: Power3.easeOut
                }
              }
            ],
            hide: [
              {
                duration: 0.2,
                tween: {
                  opacity: 0,
                  ease: Power3.easeIn
                }
              }, {
                duration: 0.4,
                tween: {
                  className: '',
                  ease: Power3.easeIn
                }
              }
            ]
          },
          menu: {
            attach: {
              pointerover: [
                {
                  el: '.button.left',
                  id: 'left'
                }, {
                  el: '.button.right',
                  id: 'right'
                }
              ],
              pointerout: [
                {
                  el: '.button.left',
                  id: 'left'
                }, {
                  el: '.button.right',
                  id: 'right'
                }
              ],
              click: [
                {
                  el: '.button.left',
                  id: 'left',
                  delayed: true
                }, {
                  el: '.button.right',
                  id: 'right',
                  delayed: true
                }
              ],
              keydown: {
                keys: ['ArrowLeft', 'ArrowRight', 'Enter'],
                delayed: true
              }
            },
            render: function(){
              var a, b, c, d;
              a = this.data;
              b = this.cfg.nav.current || 0;
              c = a.length - 1;
              d = a.map(function(item){
                return {
                  id: item.id,
                  name: item.name
                };
              });
              return {
                list: d,
                current: a[b].name,
                prev: b
                  ? a[b - 1].name
                  : a[a.length - 1].name,
                next: b === c
                  ? a[0].name
                  : a[b + 1].name
              };
            },
            refresh: function(data){
              var a, b, main, c;
              if (!data.node) {
                data.node = this.cfg.node.query('.carousel');
                data.time = this.cfg.show[1].duration;
              }
              if (!data.box) {
                data.box = data.node.query('.item');
                data.btn = data.node.query('.button');
              }
              if (!data.hover) {
                a = data.box;
                b = data.btn;
                data.hover = [1, 3].map(function(index){
                  var c;
                  c = new TimelineLite({
                    paused: true,
                    ease: Power2.easeOut
                  });
                  c.add((function(a, b){
                    return function(){
                      a.removeClass('hover');
                      b.removeClass('hover');
                    };
                  }.call(this, a, b)));
                  c.to([a[index], b[index], a[2], b[2]], data.time, {
                    className: '+=hover'
                  });
                  return c;
                });
              }
              if (!data.slide) {
                main = this.cfg.context;
                a = main.cfg.nav.current || 0;
                b = main.data.length - 1;
                c = [
                  a > 1
                    ? a - 2
                    : a - 1 + b, a + 2 <= b
                    ? a + 2
                    : a + 1 - b
                ];
                data.btn[0].innerHTML = main.data[c[0]].name;
                data.btn[4].innerHTML = main.data[c[1]].name;
                a = [data.box.node[0].clone(), data.box.node[4].clone()];
                b = [w3ui('.button', true, a[0]), w3ui('.button', true, a[1])];
                a = [[a[0], b[0][0]], [a[1], b[1][0]]];
                data.slide = a.map(function(box, index){
                  var a, b;
                  a = new TimelineMax({
                    paused: true,
                    data: {
                      complete: function(){
                        data.box.propRemove('style');
                        data.btn.propRemove('style');
                        if (index) {
                          data.node.node.append(box[0]);
                          data.box.node[0].remove();
                        } else {
                          data.node.node.prepend(box[0]);
                          data.box.node[4].remove();
                        }
                        delete data.box;
                        delete data.hover;
                        delete data.slide;
                      }
                    }
                  });
                  if (index) {
                    b = [['+=hidden', '-=active', '+=active', '-=hidden'], ['+=hidden', 'button left', 'button center', '-=hidden']];
                  } else {
                    b = [['-=hidden', '+=active', '-=active', '+=hidden'], ['-=hidden', 'button center', 'button right', '+=hidden']];
                  }
                  a.to(data.box[index + 0], data.time, {
                    className: b[0][0]
                  }, 0);
                  a.to(data.box[index + 1], data.time, {
                    className: b[0][1]
                  }, 0);
                  a.to(data.box[index + 2], data.time, {
                    className: b[0][2]
                  }, 0);
                  a.to(data.box[index + 3], data.time, {
                    className: b[0][3]
                  }, 0);
                  a.to(data.btn[index + 0], data.time, {
                    className: b[1][0]
                  }, 0);
                  a.to(data.btn[index + 1], data.time, {
                    className: b[1][1]
                  }, 0);
                  a.to(data.btn[index + 2], data.time, {
                    className: b[1][2]
                  }, 0);
                  a.to(data.btn[index + 3], data.time, {
                    className: b[1][3]
                  }, 0);
                  return a;
                });
              }
              return true;
            }
          }
        }
      }
    }
  };
  P = {
    init: function(){
      if (!V.init(M)) {
        console.log('P.init() failed');
        return false;
      }
      P.construct();
      window.addEventListener('resize', this.resize.bind(this));
      return true;
    },
    construct: function(){
      var busy, lock, nav, id0, id1, pid, cancelThread, thread;
      busy = false;
      lock = false;
      nav = null;
      id0 = '';
      id1 = '';
      pid = '';
      cancelThread = function(msg){
        if (msg) {
          console.log(msg);
        }
        lock = false;
        busy = false;
        return null;
      };
      thread = [
        function(){
          return !busy;
        }, function(){
          var i$, ref$, len$, b, a;
          busy = true;
          if (nav) {
            for (i$ = 0, len$ = (ref$ = nav).length; i$ < len$; ++i$) {
              b = i$;
              a = ref$[i$];
              if (a !== M[b]) {
                id0 = a;
                id1 = M[b];
                break;
              }
            }
          } else {
            id1 = M[0];
          }
          if (id0 === id1) {
            return cancelThread();
          }
          pid = V.el[id1].cfg.parent.cfg.id;
          if (!V.call('detach')) {
            return cancelThread('detach failed');
          }
          if (id0) {
            lock = true;
            V.animation.hide(id0, function(){
              lock = false;
            });
          }
          return true;
        }, function(){
          return !lock;
        }, function(){
          if (!V.call('render', pid, id0)) {
            return cancelThread('render failed');
          }
          if (!V.call('init')) {
            return cancelThread('init failed');
          }
          lock = true;
          V.animation.show(id1, id0, function(){
            lock = false;
          });
          return true;
        }, function(){
          return !lock;
        }, function(){
          ['resize', 'refresh', 'finit', 'attach'].every(function(a){
            return V.call(a);
          });
          nav = M.nav.map(function(a){
            return a.id;
          });
          busy = false;
          return true;
        }
      ];
      return function(){
        w3ui.THREAD(thread);
      };
    }(),
    update: function(id){
      id == null && (id = M[0]);
      ['refresh', 'detach', 'attach'].every(function(a){
        return V.call(a, id);
      });
      delete P.event.busy;
    },
    resize: function(force){
      var me, f;
      me = this.resize;
      if (force || !me.timer) {
        if (!V.call('resize')) {
          console.log('resize failed');
        }
      } else {
        window.clearTimeout(me.timer);
        f = me.bind(this);
        me.timer = window.setTimeout(f, 250);
      }
    },
    event: function(data, event){
      var me, a, cfg, nav;
      me = P.event;
      if (data.preventDefault) {
        event.preventDefault();
      }
      if (P.construct.busy || !this.cfg.detach || me.busy && !data.delayed) {
        return true;
      }
      if (me.busy) {
        event.stopPropagation();
        a = !!me.delayed;
        me.delayed = me.bind(this, data, event);
        if (a) {
          return false;
        }
        if (typeof me.busy === 'object') {
          me.busy.timeScale(2);
        }
        w3ui.THREAD([function(){
          if (me.busy) {
            return false;
          }
          me.delayed();
          delete me.delayed;
          return true;
        }]);
        return false;
      }
      cfg = this.cfg;
      nav = this.cfg.nav;
      event.data = data;
      data = cfg.detach.data;
      me.busy = P.react.apply(this, [event, data, cfg, nav]);
      return true;
    },
    react: function(event, data, cfg, nav){
      var a, b, c, d, e, this$ = this;
      switch (cfg.id) {
      case 'menu':
        !data.change && (data.change = function(active){
          var a, b;
          a = nav.current || 0;
          b = this$.data.length - 1;
          if (active) {
            a = a > 0 ? a - 1 : b;
          } else {
            a = a < b ? a + 1 : 0;
          }
          nav.current = a;
        });
        switch (event.type) {
        case 'pointerdown':
          a = document.elementFromPoint(event.pageX, event.pageY);
          if (a.className === 'button') {
            break;
          }
          event.stopPropagation();
          data.swipe = event.pointerType !== 'mouse';
          data.size = 0.5 * cfg.node.box.innerWidth;
          data.x = event.pageX;
          data.active = false;
          data.drag = V.el.menu.cfg.data.drag;
          break;
        case 'pointermove':
          if (!data.drag) {
            break;
          }
          event.stopPropagation();
          if ((a = event.pageX - data.x) < 0) {
            b = [0, 1];
          } else {
            b = [1, 0];
          }
          if ((a = Math.abs(a)) < 0.1) {
            if (!data.swipe) {
              break;
            }
            delete data.drag;
            break;
          }
          c = b.map(function(index){
            return data.drag[index];
          });
          a = a / data.size;
          if (a > 0.99) {
            a = 0.99;
          }
          if (data.swipe) {
            data.change(b[0]);
            delete data.drag;
            c[1].add(P.update);
            return c[1].play();
          }
          d = !data.active || data.active[0] !== b[0];
          e = d || Math.abs(a - c[1].progress()) > 0.001;
          if (d) {
            if (!c[0].paused()) {
              c[0].pause();
            }
            c[0].progress(0);
          }
          if (e) {
            if (!c[1].paused()) {
              c[1].pause();
            }
            c[1].progress(a);
          }
          data.active = b;
          break;
        case 'pointerup':
          if (!data.drag || data.swipe) {
            break;
          }
          event.stopPropagation();
          if (!(a = data.active)) {
            delete data.drag;
            break;
          }
          b = data.drag[a[1]].progress();
          if (b < 0.35) {
            data.drag[a[1]].reverse();
            delete data.drag;
            break;
          }
          data.change(a[0]);
          a = data.drag[a[1]];
          a.add(P.update);
          return a.play();
        case 'pointerover':
          if ((a = event.target.dataset.num) === undefined) {
            break;
          }
          event.stopPropagation();
          nav.currentItem[nav.current] = +a;
          b = cfg.data.btn;
          b.removeClass('active');
          b['class'][a].add('active');
          true;
          break;
        case 'keydown':
          a = event.data.keys.indexOf(event.key);
          if (a < 0) {
            break;
          }
          event.preventDefault();
          event.stopImmediatePropagation();
          b = nav.currentItem[nav.current];
          c = cfg.data.btn;
          if (a) {
            a = b < c.length - 1 ? b + 1 : 0;
          } else {
            a = b > 0
              ? b - 1
              : c.length - 1;
          }
          nav.currentItem[nav.current] = a;
          c.removeClass('active');
          c['class'][a].add('active');
          break;
        case 'click':
          event.stopPropagation();
          a = cfg.level - 1;
          b = event.target.dataset.id;
          M[a] = b;
          P.construct();
        }
        break;
      case 'console':
        switch (nav.id) {
        case 'menu':
          !data.change && (data.change = function(id){
            var c, a, b, d;
            c = cfg.level + 1;
            a = M.nav[c].current || 0;
            b = cfg.context.data.length - 1;
            if (id) {
              b = a < b ? a + 1 : 0;
            } else {
              b = a > 0 ? a - 1 : b;
            }
            M.nav[c].current = b;
            a = V.el.console.cfg.data.hover;
            b = V.el.menu.cfg.data.drag[id];
            c = [a[0].progress() > 0.0001, a[1].progress() > 0.0001];
            if (c[0] || c[1]) {
              d = b;
              b = new TimelineLite({
                paused: true,
                ease: Power3.easeInOut
              });
              if (c[0]) {
                b.add(a[0].reverse().timeScale(2, 0));
              }
              if (c[1]) {
                b.add(a[1].reverse().timeScale(2, 0));
              }
              b.add(d.play(0));
            }
            b.add(P.update);
            return b.play();
          });
          switch (event.type) {
          case 'pointerover':
            event.stopPropagation();
            a = V.el.console.cfg.data.hover;
            b = event.data.id === 'left' ? 0 : 1;
            a[b].play();
            break;
          case 'pointerout':
            event.stopPropagation();
            a = V.el.console.cfg.data.hover;
            b = event.data.id === 'left' ? 0 : 1;
            a[b].reverse();
            break;
          case 'click':
            event.stopPropagation();
            a = event.data.id === 'left' ? 0 : 1;
            return data.change(a);
          case 'keydown':
            a = event.data.keys.indexOf(event.key);
            if (a < 0) {
              break;
            }
            event.preventDefault();
            event.stopImmediatePropagation();
            if (a < 2) {
              return data.change(a);
            }
            a = cfg.context.cfg.data.btn.find(function(node){
              return node.classList.contains('active');
            });
            if (!a) {
              break;
            }
            a = a.dataset.id;
            M[cfg.level] = a;
            P.construct();
          }
        }
      }
      return false;
    }
  };
  if (M && V && P) {
    return P.init();
  }
});