// Generated by LiveScript 1.5.0
'use strict';
var MVPApp, toString$ = {}.toString;
MVPApp = function(){
  /* личный набор {{{
  *
  */
  /** CLONE {{{
  *
  * Глубокое клонирование (создание копии объекта)
  */
  var CLONE, PARTIAL, PROXY, BOUNCE, THREAD, MY, M, V, P;
  CLONE = function(obj, trace){
    var o, i$, len$, x, obj_clone, i, own$ = {}.hasOwnProperty;
    if (obj === null || typeof obj !== 'object') {
      return obj;
    }
    switch (toString$.call(obj).slice(8, -1)) {
    case 'Date':
      return new Date(obj.getTime());
    case 'RegExp':
      return new RegExp(obj);
    case 'Array':
      o = false;
      break;
    case 'Object':
      if ('jquery' in obj) {
        return obj;
      }
      o = true;
      break;
    default:
      console.warn('CLONE fail:' + t);
      return obj;
    }
    if (trace) {
      for (i$ = 0, len$ = trace.length; i$ < len$; ++i$) {
        x = trace[i$];
        if (obj === trace[x]) {
          return obj;
        }
      }
      trace[trace.length] = obj;
    } else {
      trace = [obj];
    }
    obj_clone = o
      ? {}
      : [];
    if (o) {
      for (x in obj) if (own$.call(obj, x)) {
        obj_clone[x] = CLONE(obj[x], trace);
      }
    } else {
      for (i$ = 0, len$ = obj.length; i$ < len$; ++i$) {
        i = i$;
        x = obj[i$];
        obj_clone[i] = CLONE(x, trace);
      }
    }
    return obj_clone;
  };
  /** }}} */
  /** PARTIAL {{{
  *
  * Функция для техники частичного применения.
  * Возвращает функцию с "закрепленными" слева аргументами.
  */
  PARTIAL = function(scope, func){
    var args;
    args = arguments.length > 2
      ? Array.apply(null, arguments).slice(2)
      : [];
    return function(){
      return func.apply(scope, args.concat(Array.apply(null, arguments)));
    };
  };
  /** }}} */
  /** PROXY {{{
  *
  * приложение основано на функциональности Прокси-объекта
  */
  PROXY = function(obj, handler){
    var p, e;
    return (function(){
      try {
        obj.clone = function(o){
          o = o
            ? import$(CLONE(obj), o)
            : CLONE(obj);
          return PROXY(o, handler);
        };
        p = new Proxy(obj, handler);
        if (handler.init) {
          handler.init.apply(p);
        }
        return p;
      } catch (e$) {
        e = e$;
        console.log('unhandled');
        console.log(e);
        return null;
      }
    }());
  };
  /** }}} */
  /** BOUNCE {{{
  *
  * Откладываем выполнение функции на заданное время.
  */
  BOUNCE = function(scope, timeout, args, func){
    var id, runme;
    if (!func || !scope) {
      return false;
    }
    if (!timeout) {
      timeout = 100;
    }
    if (!func.bounce) {
      func.bounce = {};
    }
    do {
      id = 'x' + Math.random().toString(36).substr(2, 16);
    } while (func.bounce[id]);
    runme = function(){
      delete func.bounce[id];
      func.apply(scope, args);
    };
    func.bounce[id] = window.setTimeout(runme, timeout);
    return true;
  };
  /** }}} */
  /** THREAD {{{
  *
  * Выполняем функции последовательно, нитью, цепочкой или потоком
  */
  THREAD = function(funcs, a){
    var x;
    !a && (a = 0);
    x = funcs[a]();
    if (x === false) {
      window.setTimeout(THREAD, 40, funcs, a);
    } else if (x === true) {
      if (!!funcs[++a]) {
        THREAD(funcs, a);
      }
    }
  };
  /** }}} */
  /** CURRY {{{
  *
  * пример техники каррирования
  *
  *   add (a, b) ->
  *       a + b
  *
  *   add 3, 4 # =7
  *
  *   This is a function that takes two arguments, a and b, and returns their sum.
  *   We will now curry this function:
  *
  *   add (a) ->
  *       (b) ->
  *           a + b
  *
  *   This is a function that takes one argument, a,
  *   and returns a function that takes another argument, b,
  *   and that function returns their sum.
  *
  *   add(3)(4) # =7
  *   add3 = add(3)
  *   add3(4) #=7
  *
  /** }}} */
  /* MY (набор вспомогательных функций) {{{
  */
  MY = {
    randomInt: function(min, max){
      min == null && (min = 0);
      max == null && (max = 1);
      if (min > max) {
        return max;
      }
      min = Math.ceil(min);
      max = Math.random() * (Math.floor(max) - min + 1) + min;
      return Math.floor(max);
    },
    uniqueArray: function(a){
      return a.filter(function(val, index, self){
        return index === self.indexOf(val);
      });
    },
    measureText: function(txt, font){
      var a;
      a = document.createElement('canvas').getContext('2d');
      a.font = font;
      return a.measureText(txt).width;
    }
  };
  /* }}} */
  /* }}} */
  /* [M]odel {{{
  */
  M = {
    authorized: true,
    nav: PROXY({
      arch: [],
      data: [
        {
          id: '',
          panel: true
        }, {
          id: ''
        }, {
          id: ''
        }, {
          id: ''
        }
      ],
      restore: true,
      keys: function(){
        var this$ = this;
        return this.data.map(function(it){
          return it.id;
        });
      }
    }, {
      init: function(){
        var i$, to$, a;
        for (i$ = 0, to$ = this.data.length - 1; i$ <= to$; ++i$) {
          a = i$;
          this.arch[a] = {
            '': CLONE(this.data.slice(a + 1))
          };
        }
        return true;
      },
      set: function(obj, p, v, prx){
        var n, w, a;
        if (typeof p !== 'string' || isNaN(parseInt(p))) {
          obj[p] = v;
          return true;
        }
        p = +p;
        n = obj.data.length;
        if (p < 0 || p >= n) {
          return true;
        }
        w = obj.data[p].id;
        if (w === v && v === '') {
          return true;
        }
        if (v === w) {
          v = '';
        }
        if (w) {
          obj.arch[p][w] = obj.data.slice(p + 1, n);
        }
        a = obj.arch[p][v] && obj.restore ? v : '';
        obj.data.splice(p + 1, n);
        obj.data = obj.data.concat(CLONE(obj.arch[p][a]));
        obj.data[p].id = v;
        return true;
      },
      get: function(obj, p, prx){
        if (typeof p !== 'string' || isNaN(parseInt(p))) {
          return obj[p];
        }
        p = +p;
        if (p < 0 || p >= obj.data.length) {
          return null;
        }
        return obj.data[p];
      }
    })
  };
  /** }}} */
  /* [V]iew {{{
  */
  V = {
    nav: M.nav.clone({
      restore: false
    }),
    state: 0,
    timer: null,
    init: function(){
      var i$, ref$, len$, a;
      for (i$ = 0, len$ = (ref$ = this.nav.data).length; i$ < len$; ++i$) {
        a = ref$[i$];
        a.id = '*';
      }
      if (!this.color.init()) {
        return false;
      }
      if (this.init.state) {
        return true;
      }
      this.init.state = true;
      this.color.init();
      this.skeleton.wa = $('#wa');
      return true;
    },
    refresh: function(onComplete){
      var me;
      me = this;
      me.state++;
      V.skeleton.run('refresh', this.nav.keys(), function(){
        me.state--;
        if (onComplete) {
          onComplete();
        }
      });
      /*
      t = t ++ [ # сброс + ожидание {{{
          ->
              # рабочая область (общий стиль)
              # тип интерфейса
              V.wa.removeClass \auth if not V.auth
              V.wa.removeClass \std if V.auth
              # навигация
              for a,b in v when not a
                  V.wa.removeClass 'n'+b
              # левая панель
              w2ui.wa.refresh \left
              # ok
              true
      ]
      # }}}
      THREAD t ++ [ # {{{
          ->
              # тулбар
              # заголовок
              gs.setTitle if V.auth or not v.0
                  then 1
                  else if v.0
                      then 2
                      else 0
              # главная панель
              # фон
              a = if v.2
                  then ['' '']
                  else if V.auth
                      then ['gr2' '']
                      else if v.1
                          then ['gr0' 'gr1']
                          else ['gr0' '']
              gs.setBackground a, !->
                  # грид
                  if V.grid
                      w2ui.grid.refresh! if w2ui.grid
                      V.grid.show!
                      V.gridControls.show!
                  # авторизация
                  if V.auth
                      V.auth.show!
              # рабочая область (общий стиль)
              V.wa.toggleClass \ok, true # начальная установка
              V.wa.toggleClass \auth, !V.auth # авторизация выполнена
              # навигация
              for a,b in v
                  V.wa.toggleClass 'n'+b, !!a
                  for own c of V.nav[b] when c != \id
                      V.wa.toggleClass 'n'+b+''+c, !!V.nav[b][c]
              # функция завершена
              me.state = false
              onComplete.apply me if onComplete
              true
      ] # }}}
      */
      return true;
    },
    resize: function(delay, onComplete){
      var me, fn;
      me = this;
      if (delay || me.state !== 0) {
        fn = me.resize;
        if (!delay) {
          delay = 250;
        }
        if (fn.timer) {
          window.clearTimeout(fn.timer);
        }
        fn.timer = window.setTimeout(PARTIAL(this, me, 0, onComplete), delay);
      } else {
        me.state++;
        V.skeleton.run('resize', this.nav.keys(), function(){
          me.state--;
          if (onComplete) {
            onComplete();
          }
        });
      }
      true;
      /*
      if @auth
          # авторизация!
          # определяем размер поля
          a = V.s.canvas
          a.outerWidth @view.outerWidth!
          a.outerHeight @view.outerHeight!
          # запуск
          gs.auth.init!
      # завершаем
      me.state = false
      */
    },
    skeleton: PROXY({
      cfg: {
        cfg: {},
        wa: {
          init: function(){
            var me, ls, i$, len$, a, b;
            me = this;
            ls = V.skeleton.list();
            for (i$ = 0, len$ = ls.length; i$ < len$; ++i$) {
              a = ls[i$];
              if ((b = $('#' + a)).length !== 0) {
                V.skeleton[a] = b;
                V[a].hide({
                  time: 0
                });
              }
            }
            $(window).on('resize.' + this[0].id, function(){
              return V.resize(100, function(){
                return V.refresh();
              });
            });
            me.show(function(){
              var i$, ref$, len$, a;
              for (i$ = 0, len$ = (ref$ = ls).length; i$ < len$; ++i$) {
                a = ref$[i$];
                if (V[a]) {
                  V[a].show();
                }
              }
            });
            return true;
          }
        },
        toolbar: {
          cfg: {
            init: function(){
              var me;
              me = this;
              me.pb = $('#toolbar .ui-progressbar').progressbar({
                value: 0
              });
              return true;
            }
          },
          mode: {
            cfg: {
              init: function(){
                debugger;
                var me;
                me = this;
                return true;
              },
              attach: function(){
                var i$, ref$, len$, a;
                for (i$ = 0, len$ = (ref$ = V.skeleton.list(this[0].id)).length; i$ < len$; ++i$) {
                  a = ref$[i$];
                  this[a].click(fn$);
                }
                return false;
                function fn$(){
                  return P.setNav(0, this.id);
                }
              },
              detach: function(){
                var i$, ref$, len$, a;
                for (i$ = 0, len$ = (ref$ = V.skeleton.list(this[0].id)).length; i$ < len$; ++i$) {
                  a = ref$[i$];
                  this[a].off();
                }
                return false;
              },
              refresh: function(v, onComplete){
                debugger;
                /*
                if v.0
                    # устанавливаем стиль кноп
                    for a,b in me.btn
                        me.m_btn.eq(b).toggleClass \on,  a.id == v.0
                        me.m_btn.eq(b).toggleClass \off, a.id != v.0
                else
                    # сбрасываем стиль
                    s.m_btn.removeClass 'on off'
                */
                return true;
              },
              resize: function(v, onComplete){
                debugger;
                var i$, ref$, len$, a, b;
                for (i$ = 0, len$ = (ref$ = V.skeleton.list(this[0].id)).length; i$ < len$; ++i$) {
                  a = ref$[i$];
                  b = this[a];
                }
                me.m_btn.outerWidth(function(index, width){
                  var c;
                  c = V[this.id].cfg;
                  if (V.auth) {
                    this.innerHTML = '';
                  } else if (width > c.ss) {
                    this.innerHTML = c.n;
                  } else {
                    this.innerHTML = c.sn;
                  }
                  return width;
                });
                return true;
              }
            },
            m1: {
              n: 'Управление',
              sn: 'Упр',
              ss: 130
            },
            m2: {
              n: 'Входящие',
              sn: 'Вхд',
              ss: 130
            },
            m3: {
              n: 'Исходящие',
              sn: 'Исх',
              ss: 130
            }
          },
          title: {
            cfg: {}
          }
        },
        todo: {
          panel: {
            cfg: {
              init: function(){
                var me, id;
                me = this;
                id = this[0].id;
                me.resizer = $('#layout_wa_resizer_left');
                me.func = {
                  attach: function(lv, m){
                    if (!m[0]) {
                      return false;
                    }
                    me.resizer.click(function(){
                      P.nav(0, 'panel', !V.nav[0].panel);
                    });
                    if (m[2]) {
                      me.a_sw.filter(function(){
                        return this.id === m[2];
                      }).prop('checked', true);
                      me.resizer.on('mouseenter.' + id, function(){
                        V.view.addClass('sel');
                      });
                      me.resizer.on('mouseleave.' + id, function(){
                        V.view.removeClass('sel');
                      });
                    }
                    me.func.detach = function(lv, m){
                      lv[2] && me.resizer.off(id);
                      lv[0] && me.hide(function(){
                        me.off;
                        me.a_sw.off();
                        me.accordion('destroy');
                        me.load();
                      });
                      delete me.func.detach;
                      return true;
                    };
                    return true;
                  },
                  refresh: function(){
                    var a, b, i$, ref$, len$;
                    a = 'left';
                    b = w2ui.wa.get(a).hidden;
                    if (V.auth || !V.nav[0].id) {
                      if (!b) {
                        w2ui.wa.hide(a);
                      }
                      return true;
                    }
                    if (b) {
                      w2ui.wa.show(a);
                    }
                    if (!V.nav[0].panel) {
                      return true;
                    }
                    me.accordion('refresh');
                    if (me.a_panel.length > 0) {
                      me.a_panel.eq(0).addClass('top');
                    }
                    if (me.a_panel.length > 1) {
                      me.a_panel.eq(-1).addClass('bottom');
                    }
                    a = v[1] ? V.skeleton.index(v[1]) : false;
                    if (a !== false) {
                      me.a_panel.addClass('faded');
                      me.a_panel.filter(function(index, el){
                        return index === a;
                      }).removeClass('faded');
                    } else {
                      me.a_panel.removeClass('faded');
                    }
                    me.a_panel.removeClass('below');
                    if (a !== false && a + 1 < me.a_panel.length - 1) {
                      me.a_panel.eq(a + 1).addClass('below');
                    }
                    if (V.nav[2].id) {
                      for (i$ = 0, len$ = (ref$ = me.a_box).length; i$ < len$; ++i$) {
                        b = i$;
                        a = ref$[i$];
                        me.a_box.eq(b).toggleClass('on', a.checked);
                        me.a_box.eq(b).toggleClass('off', !a.checked);
                      }
                    } else {
                      me.a_box.removeClass('on off');
                    }
                    me.show();
                    return true;
                  },
                  resize: function(){
                    var v, a;
                    if (!(v = V.nav[0]).id) {
                      return true;
                    }
                    if (v.panel) {
                      a = V.toolbar.m_box.outerWidth() + w2ui.wa.resizer + 4;
                      if (me.reset) {
                        me.accordion('refresh');
                      }
                    } else {
                      a = 0;
                    }
                    if (Math.abs(me.outerWidth() - a) > 0) {
                      w2ui.wa.sizeTo('left', a);
                    }
                    return true;
                  }
                };
                return true;
              },
              create: function(){
                var me;
                me = V[this.id];
                me.a_panel = $('#panel div.aPanel');
                me.a_box = $('#panel label.swBox');
                me.a_sw = $('#panel input.swInput');
                me.reset = function(){
                  me.hide(function(){
                    me.off('.a');
                    me.a_sw.off();
                    me.accordion('destroy');
                    delete me.reset;
                    me.load();
                  });
                };
                me.on('accordionbeforeactivate.a', function(e, ui){
                  var a;
                  if (P.sync.state) {
                    e.stopPropagation();
                    return false;
                  }
                  a = ui.newHeader.length === 0
                    ? ''
                    : ui.newHeader[0].id;
                  P.setNav(1, a);
                  return true;
                });
                me.a_sw.change(function(e){
                  if (P.sync.state || V.refresh.state) {
                    e.stopPropagation();
                    return false;
                  }
                  if (this.type === 'radio') {
                    P.setNav(2, this.id);
                  }
                  return true;
                });
                me.a_sw.click(function(e){
                  if (P.sync.state || V.refresh.state) {
                    e.stopPropagation();
                    return false;
                  }
                  if (this.type === 'radio' && V.nav[2].id === this.id) {
                    this.checked = false;
                    P.setNav(2, this.id);
                  }
                  return true;
                });
                return true;
              },
              collapsible: true,
              heightStyle: 'fill',
              icons: false,
              header: '.aPanel'
            },
            m1v1: {
              cfg: {
                n: '1'
              },
              m1v1f1: {
                n: '1-1'
              },
              m1v1f2: {
                n: '1-2'
              }
            },
            m1v2: {
              cfg: {
                n: '2'
              },
              m1v2f1: {
                n: '2-1'
              },
              m1v2f2: {
                n: '2-2'
              },
              m1v2f3: {
                n: '2-3'
              },
              m1v2f4: {
                n: '2-4'
              }
            },
            m2v1: {
              cfg: {
                n: 'Картотека'
              },
              m2v1f1: {
                n: 'помещения'
              },
              m2v1f2: {
                n: 'дома'
              },
              m2v1f3: {
                n: 'микрорайоны/улицы'
              },
              m2v1f4: {
                n: 'районы'
              },
              m2v1f5: {
                n: 'города'
              }
            },
            m2v4: {
              cfg: {
                n: 'Потребители'
              },
              m2v4f1: {
                n: 'частные лица'
              },
              m2v4f2: {
                n: 'организации'
              }
            },
            m2v2: {
              cfg: {
                n: 'Оплата'
              },
              m2v2f1: {
                n: 'касса'
              },
              m2v2f2: {
                n: 'банк'
              },
              m2v2f3: {
                n: 'взаимозачет'
              },
              m2v2f4: {
                n: 'сторно'
              }
            },
            m2v3: {
              cfg: {
                n: 'Объемы'
              },
              m2v3f1: {
                n: '3-1'
              },
              m2v3f2: {
                n: '3-2'
              },
              m2v3f3: {
                n: '3-3'
              }
            },
            m2v5: {
              cfg: {
                n: 'Поставщики'
              },
              m2v5f1: {
                n: '5-1'
              },
              m2v5f2: {
                n: '5-2'
              }
            },
            m3v1: {
              cfg: {
                n: 'Отчеты'
              },
              m3v1f1: {
                n: '1-1'
              },
              m3v1f2: {
                n: '1-2'
              }
            },
            m3v2: {
              cfg: {
                n: 'Запросы'
              },
              m3v2f1: {
                n: '2-1'
              },
              m3v2f2: {
                n: '2-2'
              }
            }
          },
          view: {
            cfg: {
              init: function(){
                var me;
                me = this;
                me.func = {
                  attach: function(){
                    me.func.detach = function(){
                      delete me.func.detach;
                      return true;
                    };
                    return true;
                  },
                  refresh: function(){
                    me.show();
                    return true;
                  },
                  resize: function(){
                    return true;
                  }
                };
                return true;
              }
            },
            auth: {
              cfg: {
                preInit: false
              }
            },
            grid: {
              cfg: {
                preInit: false,
                name: 'grid',
                show: {
                  header: false,
                  toolbar: false,
                  footer: true,
                  columnHeaders: true,
                  lineNumbers: false,
                  expandColumn: false,
                  selectColumn: false,
                  emptyRecords: true,
                  toolbarReload: true,
                  toolbarColumns: true,
                  toolbarSearch: true,
                  toolbarAdd: true,
                  toolbarEdit: true,
                  toolbarDelete: true,
                  toolbarSave: true,
                  selectionBorder: true,
                  recordTitles: true,
                  skipRecords: true
                }
              },
              m1v1f1g: {},
              m2v2f1g: {
                columns: [
                  {
                    caption: 'ID',
                    field: 'recid',
                    hidden: true
                  }, {
                    caption: '№ пачки',
                    field: 'rName',
                    size: '40%',
                    sortable: true
                  }, {
                    caption: 'тип',
                    field: 'rType',
                    size: '10%',
                    attr: 'align=center'
                  }, {
                    caption: 'количество',
                    field: 'rCnt',
                    size: '20%',
                    attr: 'align=right'
                  }, {
                    caption: 'сумма',
                    field: 'rSum',
                    size: '20%',
                    attr: 'align=right'
                  }, {
                    caption: 'дата',
                    field: 'rDate',
                    size: '10%',
                    sortable: true,
                    attr: 'align=center'
                  }
                ],
                sortData: [{
                  field: 'rName',
                  direction: 'ASC'
                }],
                records: [
                  {
                    recid: 1,
                    rName: 'XXXXXXXX',
                    rType: 'KZT',
                    rCnt: '733',
                    rSum: '3247192.22',
                    rDate: '2017/01/01'
                  }, {
                    recid: 2,
                    rName: 'YYYYYYYY',
                    rType: 'KZT',
                    rCnt: '433',
                    rSum: '156000.00',
                    rDate: '2016/12/30'
                  }, {
                    recid: 3,
                    rName: 'ZZZZZZZZ',
                    rType: 'KZT',
                    rCnt: '84',
                    rSum: '95000.00',
                    rDate: '2017/01/15'
                  }
                ]
                /*
                */
              }
            },
            gridControls: {
              cfg: {},
              m2v2f1gc: {
                list: [
                  {
                    n: 'добавить'
                  }, {
                    n: 'удалить'
                  }, {
                    n: 'изменить'
                  }
                ]
              }
            }
          },
          console: {
            cfg: {
              ifColor: {
                n0: 'Цвет',
                n1: '»',
                animate: true,
                disabled: false,
                min: 0,
                max: 360,
                create: function(){
                  return true;
                },
                slide: function(e, ui){
                  V.note.text(ui.value);
                },
                stop: function(e, ui){
                  return true;
                }
              }
            },
            note: {
              cfg: {}
            },
            sliderBtn: {
              cfg: {
                init: function(cfg){
                  var a;
                  a = '#' + this[0].id;
                  this.scale = $(a + ' div.ui-slider');
                  this.handle = $(a + ' div.ui-slider .ui-slider-handle');
                  this.btn0 = $(a + ' button.accept').button();
                  this.btn1 = $(a + ' button.restore').button();
                  this.btn0.text(cfg.n0);
                  this.btn1.text(cfg.n1);
                  this.scale.slider(cfg);
                  return true;
                }
              }
            }
          }
        }
      },
      _seek: function(cid, node, path, pid){
        var a, b;
        if (node.cfg) {
          if (node[cid]) {
            if (pid && path) {
              path.unshift(pid);
            }
            return node[cid];
          }
          for (a in node) {
            if (b = this._seek(cid, node[a], path, a)) {
              if (pid && path) {
                path.unshift(pid);
              }
              return b;
            }
          }
        }
        return null;
      },
      path: function(id){
        var path;
        path = [];
        if (!id) {
          return path;
        }
        this._seek(id, this.cfg, path);
        return path;
      },
      list: function(id){
        var a;
        if (!id) {
          a = Object.keys(this.cfg).filter(function(b){
            return b !== 'wa' && b !== 'cfg';
          });
        } else {
          if ((a = this._seek(id, this.cfg)) && a.cfg) {
            a = Object.keys(a).filter(function(b){
              return b !== 'cfg';
            });
          } else {
            a = [];
          }
        }
        return a;
      },
      index: function(id){
        var a;
        if (!id) {
          return false;
        }
        if ((a = this.path(id)).length > 0) {
          a = this.list(a.pop());
        } else {
          a = this.list();
          true;
        }
        return a.indexOf(id);
      },
      run: function(method){
        var i$, args, res$, j$, onComplete, me, x;
        res$ = [];
        for (j$ = 1 < (i$ = arguments.length - 1) ? 1 : (i$ = 1); j$ < i$; ++j$) {
          res$.push(arguments[j$]);
        }
        args = res$; onComplete = arguments[i$];
        me = this;
        x = 0;
        args.push(function(){
          --x;
        });
        THREAD([
          function(){
            var i$, ref$, len$, a;
            for (i$ = 0, len$ = (ref$ = me.list()).length; i$ < len$; ++i$) {
              a = ref$[i$];
              if (V[a]) {
                x++;
                V[a].func[method].apply(V[a], args);
              }
            }
            return true;
          }, function(){
            return x === 0;
          }, function(){
            if (onComplete) {
              onComplete();
            }
            return true;
          }
        ]);
        return true;
      }
    }, {
      get: function(obj, id, prx){
        if (!id) {
          return null;
        }
        if (obj[id]) {
          return obj[id];
        }
        return obj._seek(id, obj.cfg);
      },
      set: function(obj, p, v, prx){
        /*
        *   p == имя элемента в дереве интерфейса
        *   v == обертка элемента jQuery
        */
        var a, lst, path, templ, init, fn, node, i$, len$;
        if (!p || !v || !(a = prx[p])) {
          return false;
        }
        v.cfg = a.cfg ? a.cfg : a;
        lst = obj.list(p);
        path = obj.path(p);
        templ = (a = $('#' + p + '-t')).length !== 0 ? a.html() : '';
        init = function(id){
          var params, i$, ref$, len$, a, b;
          if (templ && id) {
            params = function(cid, pid){
              var a, b, c;
              a = {
                id: cid,
                pid: pid
              };
              if (!pid && (b = $('#' + cid + '-t')).length === 1) {
                a.html = b.html();
              }
              if (b = prx[cid]) {
                if (b.cfg) {
                  import$(a, b.cfg);
                  a.body = [];
                  for (c in b) {
                    if (c !== 'cfg') {
                      a.body.push(params(c, cid));
                    }
                  }
                } else {
                  import$(a, b);
                }
              }
              return a;
            };
            v.html(Mustache.render(templ, params(id)));
          } else if (templ) {
            v.html(Mustache.render(templ, {}));
            id = this[0].id;
          } else {
            id = this[0].id;
          }
          for (i$ = 0, len$ = (ref$ = obj.list(id)).length; i$ < len$; ++i$) {
            a = ref$[i$];
            if ((b = $('#' + a)).length !== 0) {
              prx[a] = b;
            }
          }
          if (v.cfg.init) {
            return v.cfg.init.apply(v);
          }
          return true;
        };
        fn = function(method, dive){
          var i$, args, res$, j$, onComplete, x, f1, f2, a;
          res$ = [];
          for (j$ = 2 < (i$ = arguments.length - 1) ? 2 : (i$ = 2); j$ < i$; ++j$) {
            res$.push(arguments[j$]);
          }
          args = res$; onComplete = arguments[i$];
          x = 0;
          args.push(function(){
            --x;
          });
          if (v.cfg[method]) {
            f1 = [
              function(){
                if (v.cfg[method].apply(v, args)) {
                  x++;
                }
                return true;
              }, function(){
                return x === 0;
              }
            ];
          } else {
            f1 = [];
          }
          f2 = [
            function(){
              var i$, ref$, len$, a;
              for (i$ = 0, len$ = (ref$ = lst).length; i$ < len$; ++i$) {
                a = ref$[i$];
                if (v[a]) {
                  if (v[a].func[method].apply(v, args)) {
                    x++;
                  }
                }
              }
              return true;
            }, function(){
              return x === 0;
            }
          ];
          a = dive
            ? f1.concat(f2)
            : f2.concat(f1);
          THREAD(a.concat([function(){
            if (onComplete) {
              onComplete();
            }
            return true;
          }]));
          return true;
        };
        v.func = {
          init: PARTIAL(v, init),
          attach: PARTIAL(v, fn, 'attach', true),
          detach: PARTIAL(v, fn, 'detach', false),
          refresh: PARTIAL(v, fn, 'refresh', true),
          resize: PARTIAL(v, fn, 'resize', false)
        };
        v.show = PARTIAL(v, V.GSAP.show);
        v.hide = PARTIAL(v, function(a, b){
          return V.GSAP.show.apply(v, [(a.show = false, a), b]);
        });
        node = V;
        for (i$ = 0, len$ = path.length; i$ < len$; ++i$) {
          a = path[i$];
          if (!node[a]) {
            break;
          }
          node = node[a];
        }
        node[p] = v;
        if (path.length !== 0) {
          for (i$ = 0, len$ = lst.length; i$ < len$; ++i$) {
            a = lst[i$];
            if (a !== p && node[a] && prx[a].cfg) {
              node[a].remove();
              delete node[a];
            }
          }
        }
        v.func.init();
        return true;
      }
    }),
    GSAP: {
      busy: 0,
      show: function(args, onComplete){
        var me, gs, op, a;
        args == null && (args = {});
        if (typeof args === 'function') {
          onComplete = args;
          args = {};
        }
        if (args.show === undefined) {
          args.show = true;
        }
        if (args.time === undefined) {
          args.time = args.show ? 0.8 : 0.4;
        }
        me = this;
        gs = V.GSAP;
        op = args.show ? 1 : 0;
        if (me.onComplete) {
          me.onComplete();
        }
        if (args.time > 0) {
          a = me[0].style.opacity;
          a = !a
            ? 0
            : +a;
          if (a === op) {
            return true;
          }
        } else {
          TweenMax.set(me, {
            opacity: op
          });
          return true;
        }
        gs.busy += 1;
        me.onComplete = function(){
          me.anim.kill();
          gs.busy -= 1;
          if (onComplete) {
            onComplete();
          }
          delete me.anim;
        };
        me.anim = new TimelineLite({
          paused: true,
          onComplete: me.onComplete
        });
        if (args.show) {
          me.anim.to(me, args.time, {
            opacity: 1,
            ease: Power1.easeOut
          }, 0);
        } else {
          me.anim.to(me, args.time, {
            opacity: 0,
            ease: Power1.easeIn
          }, 0);
        }
        me.anim.play();
        return true;
      },
      color: function(Hue){
        V.color.set(Hue);
        return V.refresh();
      },
      setBackground: function(bg, onComplete){
        var me, gs, d, a, i$, len$, b, t0, t1, t2;
        me = this.setBackground;
        gs = this;
        d = V.view;
        if (!d || !bg && !me.bg) {
          return false;
        }
        if (!bg) {
          bg = me.bg;
          delete me.bg;
        } else {
          a = [];
          for (i$ = 0, len$ = bg.length; i$ < len$; ++i$) {
            b = bg[i$];
            if (b) {
              a.push(V.color[b]);
            }
          }
          bg = a.length > 0 ? a.join(' , ') : 'none';
        }
        if (me.bg && me.bg === bg) {
          if (onComplete) {
            onComplete();
          }
          return false;
        }
        if (me.state) {
          me.state.vars.onComplete.apply(me.state);
        }
        a = new TimelineLite({
          paused: true,
          onComplete: function(){
            this.kill();
            gs.busy -= 1;
            me.bg = bg;
            if (onComplete) {
              onComplete();
            }
            delete me.state;
          }
        });
        t0 = 0;
        t1 = 0.8;
        t2 = 0.4;
        if (d[0].style.opacity !== '0') {
          if (me.bg === 'none') {
            a.set(d, {
              opacity: 0
            }, t0);
          } else {
            a.to(d, t2, {
              opacity: 0,
              ease: Power1.easeIn
            }, t0);
            t0 += t2;
          }
        }
        if (bg === 'none') {
          a.set(d, {
            backgroundImage: 'none',
            opacity: 1
          }, t0);
        } else {
          a.set(d, {
            backgroundImage: bg
          }, t0);
          a.to(d, t1, {
            opacity: 1,
            ease: Power1.easeOut
          }, t0);
        }
        me.state = a;
        gs.busy += 1;
        a.play();
        return true;
      },
      setTitle: function(num){
        var me, a;
        num == null && (num = 0);
        me = this.setTitle;
        a = V.lang.title[num];
        if (typeof a !== 'string') {
          a = a();
        }
        if (me.txt === a) {
          return false;
        }
        me.txt = a;
        V.title.html(a);
        return false;
      },
      setNote: function(num){
        var me, a;
        num == null && (num = 0);
        me = this.setNote;
        a = V.lang.note[num];
        if (me.num === num) {
          return false;
        }
        me.num = num;
        V.note.html(a);
        return false;
      },
      auth: function(){
        var me, gs, dt, render, anim, m_enter, m_leave, m_click;
        me = this.auth;
        gs = this;
        if (me.state) {
          return false;
        }
        dt = {
          anim: null,
          radius: 4,
          R: 0,
          timeout: 4,
          p_count: 0,
          p_size0: 0.5,
          p_size1: 2.0,
          p_speed: 5,
          p_acc: 0.00005,
          stars: []
        };
        render = function(){
          var a, cw, ch, cx, cy, i$, to$, r0, r1, r2, star, vx, vy;
          a = V.s.canvas[0];
          cw = a.width;
          ch = a.height;
          cx = cw / 2;
          cy = ch / 2;
          for (i$ = 1, to$ = dt.p_count; i$ <= to$; ++i$) {
            a = i$;
            r0 = Math.random();
            r1 = Math.random() + 0.2 * r0;
            r2 = 360 * Math.random();
            dt.stars.push({
              x: cx + dt.R * Math.cos(r2 * Math.PI / 180),
              y: cy + dt.R * Math.sin(r2 * Math.PI / 180),
              r: 1,
              size: dt.p_size0 + (dt.p_size1 - dt.p_size0) * r0,
              speed: 1,
              accel: 1 + (1 + dt.p_speed * r1) / 1000,
              angle: r2
            });
          }
          if (dt.p_count > 0) {
            dt.timeout = 0;
          }
          a = [];
          dt.ctx.clearRect(0, 0, cw, ch);
          while (dt.stars.length) {
            star = dt.stars.pop();
            vx = star.speed * Math.cos(star.angle * Math.PI / 180);
            vy = star.speed * Math.sin(star.angle * Math.PI / 180);
            dt.ctx.beginPath();
            dt.ctx.lineWidth = star.size;
            dt.ctx.moveTo(star.x, star.y);
            star.x = star.x + vx;
            star.y = star.y + vy;
            dt.ctx.lineTo(star.x, star.y);
            dt.ctx.stroke();
            star.speed = star.speed * star.accel;
            star.accel = star.accel + dt.p_acc;
            if (star.x < cw && star.x > 0 && star.y < ch && star.y > 0) {
              a.push(star);
            }
          }
          dt.stars = a;
          return true;
        };
        anim = function(){
          var node;
          node = $('#auth g.node *');
          TweenMax.set(V.s.auth_svg, {
            boxShadow: '0px 0px 40px 8px ' + V.color[80]
          });
          return {
            hover: function(){
              var a, e, f, b, d;
              TweenMax.to(node[2], 0, {
                transformOrigin: 'center',
                fill: V.color[70],
                scale: 0,
                force3D: true
              });
              a = new TimelineLite({
                paused: true,
                onStart: function(){
                  var a;
                  a = this.getTweensOf(node[2]);
                  a[0].updateTo({
                    ease: Power4.easeOut
                  });
                  dt.p_count = 5;
                  dt.p_speed = 25;
                  return true;
                },
                onComplete: function(){
                  var a;
                  this.pause();
                  a = this.getTweensOf(node[2]);
                  a[0].updateTo({
                    ease: Power4.easeIn
                  });
                  this.vars.tw = TweenMax.to(node[2], 0.5, {
                    scale: 0.77,
                    fill: V.color[80],
                    repeat: -1,
                    yoyo: true,
                    ease: Circ.easeIn
                  });
                  return true;
                },
                onReverse: function(){
                  return true;
                },
                onReverseComplete: function(){
                  this.pause();
                  return true;
                }
              });
              a.stopit = function(){
                dt.p_count = 1;
                dt.p_speed = 5;
                if (this.vars.tw) {
                  this.vars.tw.kill();
                  delete this.vars.tw;
                }
                return true;
              };
              a.vars.onReverse = a.stopit;
              e = 0;
              f = Power2.easeInOut;
              b = TweenMax.to(V.s.auth_svg, 0.4, {
                boxShadow: '0px 0px 60px 10px ' + V.color[80],
                ease: f
              });
              a.add(b, e + 0.1);
              d = 0.4;
              b = TweenMax.to(V.s.auth_svg, d, {
                scale: 0.97,
                ease: f
              });
              a.add(b, e);
              d = 0.8;
              a.to(node[0], d, {
                fillOpacity: 0
              }, e);
              a.to(node[1], d, {
                fillOpacity: 1
              }, e);
              b = TweenMax.to(node[2], d, {
                fill: V.color[90],
                scale: 1
              });
              a.add(b, e);
              return a;
            }(),
            click: function(){
              return TweenMax.to(node[2], 0.5, {
                paused: true,
                mSVG: {
                  shape: node[5]
                },
                scale: 1,
                fill: V.color[87],
                ease: Back.easeOut,
                onStart: function(){
                  V.pb.eq(0).progressbar({
                    value: 100
                  });
                  V.pb.eq(1).progressbar({
                    value: 100
                  });
                  return true;
                },
                onComplete: function(){
                  this.pause();
                  dt.p_count = 4;
                  dt.p_speed = 8;
                  gs.setTitle(3);
                  return true;
                },
                onReverseComplete: function(){
                  dt.p_count = 1;
                  dt.p_speed = 5;
                  V.pb.eq(0).progressbar({
                    value: 0
                  });
                  V.pb.eq(1).progressbar({
                    value: 0
                  });
                  gs.setTitle(1);
                  return true;
                }
              });
            }(),
            wait: function(){
              var a;
              a = TweenMax.to(node[2], 2, {
                rotation: -240,
                paused: true,
                repeat: -1,
                ease: Power3.easeInOut
              });
              a.stop = function(){
                this.pause();
                this.stop.ok = false;
                TweenMax.to(node[2], 1, {
                  rotation: 0,
                  ease: Power3.easeIn,
                  onComplete: function(){
                    a.stop.ok = true;
                  }
                });
              };
              return a;
            }(),
            splash: function(){
              var a, e, d, f;
              a = new TimelineLite({
                paused: true,
                onComplete: function(){
                  this.pause();
                },
                onReverseComplete: function(){
                  this.pause();
                }
              });
              e = 0;
              a.set(V.view, {
                backgroundColor: V.color[95]
              }, e);
              a.set(node[0], {
                fill: 'url(#gr4)',
                fillOpacity: 0
              }, e);
              a.set(node[1], {
                fillOpacity: 1
              }, e);
              a.set(node[3], {
                transformOrigin: 'center',
                fill: V.color[80],
                scale: 1.2
              }, e);
              d = 2;
              a.to(node[2], d, {
                rotation: 0,
                fill: V.color[85],
                ease: Power3.easeInOut
              }, e);
              a.to(V.view, d, {
                backgroundColor: V.color[90],
                ease: Power2.easeIn,
                onComplete: function(){
                  a.set(V.view, {
                    backgroundImage: 'none'
                  });
                  true;
                }
              }, e);
              a.to(node[0], d, {
                fillOpacity: 1,
                ease: Power2.easeIn
              }, e);
              a.to(node[1], d, {
                fillOpacity: 0,
                ease: Power2.easeIn
              }, e);
              a.to(V.s.auth_svg, d, {
                boxShadow: '0px 0px 6px 2px ' + V.color[80]
              }, e);
              e = e + d - 0.5;
              a.to(node[3], d, {
                fillOpacity: 1,
                scale: 1,
                ease: Power3.easeInOut,
                onStart: function(){
                  gs.setNote(9);
                  return true;
                }
              }, e);
              e = e + d;
              a.set(node[1], {
                fill: V.color[95]
              }, e);
              a.to(node[0], d, {
                fillOpacity: 0,
                ease: Power2.easeIn
              }, e);
              a.to(node[1], d, {
                fillOpacity: 1,
                ease: Power2.easeIn
              }, e);
              a.to(node[2], 0.8, {
                mSVG: {
                  shape: node[6],
                  shapeIndex: 2
                },
                fill: V.color[80],
                ease: Back.easeOut
              }, e - d);
              a.set(V.s.auth_svg, {
                clearProps: 'boxShadow',
                onComplete: function(){
                  V.s.auth_svg.css('box-shadow', 'none');
                  gs.setNote(11);
                }
              }, e);
              f = Back.easeOut;
              d = 1.0;
              a.to(V.view, d, {
                backgroundColor: V.color[90],
                ease: f
              }, e);
              a.set(V.view, {
                backgroundImage: 'none'
              }, e + d);
              a.set(node[0], {
                fill: V.color[90]
              }, e);
              a.to(node[0], d, {
                fillOpacity: 1,
                ease: f
              }, e);
              a.to(node[1], d, {
                fillOpacity: 0,
                ease: f
              }, e);
              e = e - 0.5;
              d = 1.0;
              a.to(V.s.auth_svg, d, {
                scale: 1.3,
                ease: f
              }, e);
              a.to(node[3], d, {
                mSVG: {
                  shape: node[10],
                  shapeIndex: 0
                },
                ease: f
              }, e);
              a.to(node[2], d, {
                fill: V.color[80],
                ease: f
              }, e);
              a.to(node[3], d, {
                fill: V.color[80],
                ease: f
              }, e);
              return a;
            }(),
            finish: function(){
              var a, e, d, f;
              a = new TimelineLite({
                paused: true,
                onComplete: function(){
                  this.pause();
                },
                onReverseComplete: function(){
                  this.pause();
                }
              });
              e = 0;
              d = 1;
              f = Back.easeIn;
              a.to(node[1], d, {
                fill: V.color[90],
                ease: f
              }, e);
              a.to(V.s.auth_svg, d, {
                scale: 0.9,
                ease: f
              }, e);
              a.to(node[3], d, {
                mSVG: {
                  shape: node[9],
                  shapeIndex: 0
                },
                ease: f
              }, e);
              a.to(node[2], d, {
                fill: V.color[90],
                ease: f
              }, e);
              e = e + d;
              d = 2;
              f = Power0.easeNone;
              a.set(node[2], {
                fillOpacity: 0,
                onComplete: function(){
                  gs.setNote(12);
                  return true;
                }
              }, e);
              a.to(V.s.auth_svg, d, {
                scale: 0,
                ease: f
              }, e);
              a.to(node[1], d, {
                fill: V.color[60],
                ease: f
              }, e);
              a.to(node[3], d, {
                fill: V.color[60],
                ease: f
              }, e);
              d = 2.5;
              e = e - 0.5;
              a.to(V.view, d, {
                opacity: 0,
                ease: f
              }, e);
              return a;
            }()
          };
        };
        m_enter = function(){
          var a;
          if (dt.clicked) {
            return true;
          }
          dt.moused = true;
          gs.setNote(1);
          a = dt.anim.hover;
          if (a.paused() || a.reversed()) {
            a.play();
          }
          return true;
        };
        m_leave = function(){
          var a;
          if (dt.clicked) {
            return true;
          }
          dt.moused = false;
          gs.setNote(0);
          a = dt.anim.hover;
          if (!a.reversed()) {
            a.reverse();
          }
          return true;
        };
        m_click = function(){
          if (dt.clicked === 1) {
            return true;
          }
          if (dt.clicked === 2) {
            dt.clicked = 0;
            return true;
          }
          if (dt.clicked) {
            return false;
          }
          if (!dt.moused) {
            m_enter();
          }
          dt.clicked = 1;
          THREAD([
            function(){
              return dt.anim.hover.paused();
            }, function(){
              dt.anim.hover.stopit();
              return true;
            }, function(){
              gs.setNote(5);
              dt.anim.click.play();
              return true;
            }, function(){
              return dt.anim.click.paused();
            }, function(){
              /* DEBUG */
              if (true) {
                BOUNCE(this, 5000, [], function(){
                  var a, b;
                  a = dt.anim.click;
                  b = a.vars.onReverseComplete;
                  a.vars.onReverseComplete = function(){
                    b();
                    dt.anim.hover.reverse();
                    dt.clicked = 0;
                    if (dt.moused) {
                      m_leave();
                    }
                    a.vars.onReverseComplete = b;
                  };
                  dt.anim.click.reverse();
                });
                return null;
              }
              /**/
              return true;
            }, function(){
              if (false) {
                gs.setNote(7);
                dt.anim.click.eventCallback('onReverseComplete', function(){
                  m_leave();
                });
                dt.anim.click.reverse();
                dt.clicked = 0;
                return null;
              }
              gs.setNote(8);
              dt.p_count = 0;
              dt.p_acc = dt.p_acc * 10;
              return true;
            }, function(){
              dt.anim.splash.play();
              return true;
            }, function(){
              return dt.anim.splash.paused();
            }, function(){
              return dt.clicked === 2;
            }, function(){
              dt.anim.finish.play();
              return true;
            }, function(){
              return dt.anim.finish.paused();
            }, function(){
              gs.setNote(0);
              me.state();
              P.init();
              return true;
            }
          ]);
          return true;
        };
        V.s.auth_btn.mouseenter(m_enter);
        V.s.auth_btn.mouseleave(m_leave);
        V.s.auth_btn.click(m_click);
        me.init = function(){
          var a;
          if (dt.animate) {
            dt.animate = false;
            BOUNCE(me, 50, [], me.init);
            return true;
          }
          dt.R = dt.radius + V.s.auth_svg.height() / 2;
          a = V.s.canvas[0];
          a.width = V.s.canvas.width();
          a.height = V.s.canvas.height();
          dt.ctx = a.getContext('2d');
          dt.ctx.strokeStyle = V.color[60];
          dt.anim = anim();
          dt.animate = true;
          me.animate();
          return true;
        };
        me.animate = function(){
          if (dt.animate) {
            if (me.state) {
              dt.id = window.requestAnimationFrame(me.animate);
            }
            render();
          }
        };
        me.state = function(){
          if (dt.animate) {
            dt.animate = false;
            if (dt.id) {
              window.cancelAnimationFrame(dt.id);
            }
          }
          delete me.state;
          delete me.dt;
        };
        me.dt = dt;
        if (dt.timeout) {
          BOUNCE(me, 1000 * dt.timeout, [], function(){
            if (dt.timeout !== 0) {
              dt.p_count = 1;
            }
          });
        }
        return me.init();
      }
    },
    color: PROXY({
      Hue: '',
      Saturation: '',
      colors: null,
      gradient: {},
      root: null,
      init: function(){
        var a, i$, b, c;
        if (this.root || (this.root = $('html')).length === 0) {
          return false;
        }
        a = getComputedStyle(this.root[0]);
        this.Hue = a.getPropertyValue('--col-h').trim();
        this.Saturation = a.getPropertyValue('--col-s').trim();
        this.colors = {};
        for (i$ = 0; i$ <= 99; ++i$) {
          b = i$;
          c = '--col' + b;
          if (a.getPropertyValue(c)) {
            this.colors[c] = b;
          }
          c = c + 'a';
          if (a.getPropertyValue(c)) {
            this.colors[c] = -b;
          }
        }
        for (i$ = 0; i$ <= 99; ++i$) {
          b = i$;
          if (!(c = a.getPropertyValue('--gr' + b))) {
            break;
          }
          this.gradient['gr' + b] = c.trim();
        }
        return this.set(this.Hue);
      },
      set: function(Hue, Saturation){
        var a, b, ref$, c, d, e;
        Saturation == null && (Saturation = this.Saturation);
        if (!Hue || !Saturation || !this.root) {
          return false;
        }
        this.Hue = Hue;
        this.Saturation = Saturation;
        a = window.getComputedStyle(this.root[0]);
        for (b in ref$ = this.colors) {
          c = ref$[b];
          if (d = a.getPropertyValue(b)) {
            if (c >= 0) {
              e = 'hsla(' + Hue + ', ' + Saturation + '%, ' + c + '%, 1)';
              if (e !== d.trim()) {
                this.root[0].style.setProperty(b, e);
              }
            } else {
              c = -c;
              e = 'hsla(' + Hue + ', ' + Saturation + '%, ' + c + '%, 0)';
              if (e !== d.trim()) {
                this.root[0].style.setProperty(b, e);
              }
            }
          }
        }
        for (b in this.gradient) {
          c = this[b];
          this.root[0].style.setProperty('--' + b, c);
        }
        return true;
      }
    }, {
      get: function(obj, p, prx){
        var a;
        if (typeof p !== 'string' || obj[p]) {
          a = obj[p];
        } else if (parseInt(p)) {
          a = 'hsla(' + obj.Hue + ',' + obj.Saturation + '%,' + p + '%,1)';
        } else if ('a' === p.charAt(0)) {
          p = p.slice(1);
          a = 'hsla(' + obj.Hue + ',' + obj.Saturation + '%,' + p + '%,0)';
        } else if (obj.gradient[p]) {
          a = obj.gradient[p];
          a = a.replace(/(--col(\d{2})([a]?))/g, function(all, p1, p2, p3, pos, str){
            var a;
            a = p3 ? p3 + p2 : p2;
            if (!(a = prx[a])) {
              a = 'transparent';
            }
            return a;
          });
        } else {
          a = false;
        }
        return a;
      }
    }),
    lang: {
      cfg: {},
      title: [
        '', 'Коммунальная Информационная Система', function(t){
          /*
          v = V.nav.keys!
          if v.2
              t = V.skeleton.getBoneCfg v.2, 'n'
              a = V.skeleton.getBoneCfg v.1, 'n'
          else if v.1
              a = V.skeleton.getBoneCfg v.1, 'n'
          else
              a = V.skeleton.getBoneCfg v.0, 'n'
          # ок
          a+' :: '+t
          */
          t == null && (t = 'Статистика');
          return 'rev';
        }, 'Авторизация'
      ],
      note: ['', 'авторизация', 'активирован тестовый режим', 'подключение к серверу установлено', 'подключение к серверу не установлено', 'загрузка ключевого контейнера', 'аутентификация', 'в доступе отказано', 'доступ получен', 'ссылка', '', 'сплэш!', 'авторизация завершена'],
      links: [['лаборатория', 'https://vk.com/tvp_lab']]
    },
    s: PROXY({
      clearCache: function(){
        this.cache = {};
      },
      cache: {},
      data: {
        main_panel: '#layout_wa_panel_main div.w2ui-panel-content',
        canvas: '#view canvas',
        auth_svg: '#auth svg',
        auth_btn: '#authBtn'
      }
    }, {
      get: function(obj, p, prx){
        if (obj[p]) {
          return obj[p];
        }
        if (!obj.data[p]) {
          return null;
        }
        if (obj.cache[p]) {
          return obj.cache[p];
        }
        return obj.cache[p] = $(obj.data[p]);
      }
    })
  };
  /* }}} */
  /* [P]resenter {{{
  */
  P = {
    init: function(){
      var deps, a, b;
      deps = {
        Proxy: 'прокси-объект',
        getComputedStyle: 'определение стиля',
        requestAnimationFrame: 'метод анимации',
        Mustache: 'шаблонизатор',
        TweenMax: 'анимация greensock-js',
        w2ui: 'фреймворк'
      };
      for (a in deps) {
        b = deps[a];
        if (!window[a]) {
          console.log('отсутствует [' + b + '] ' + a);
          return false;
        }
      }
      if (!M || !V || !P) {
        console.log('отсутствует объект MVP');
        return false;
      }
      if (!V.init()) {
        return false;
      }
      return this._sync();
    },
    _sync: function(onComplete){
      var me, m, v, x, i$, len$, b, a, j$, to$, c, ref$, own$ = {}.hasOwnProperty;
      me = this._sync;
      if (V.state !== 0) {
        BOUNCE(this, 100, [onComplete], me);
        return true;
      }
      V.state++;
      m = M.nav.keys();
      v = V.nav.keys();
      x = [];
      if (M.authorized) {
        for (i$ = 0, len$ = m.length; i$ < len$; ++i$) {
          b = i$;
          a = m[i$];
          if (x[b] = a !== v[b]) {
            for (j$ = b + 1, to$ = m.length - 1; j$ <= to$; ++j$) {
              c = j$;
              x[a] = true;
            }
            break;
          }
          for (a in ref$ = M.nav.data[b]) if (own$.call(ref$, a)) {
            c = ref$[a];
            if (x[b] = c !== V.nav.data[b][a]) {
              break;
            }
          }
        }
        for (i$ = 0, len$ = (ref$ = M.nav.data).length; i$ < len$; ++i$) {
          b = i$;
          a = ref$[i$];
          V.nav.data[b] = CLONE(a);
        }
      } else {
        for (i$ = 0, len$ = (ref$ = V.nav.data).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.id = '';
        }
        a = m.length;
        x = repeatArray$([true], a);
        m = repeatArray$([''], a);
      }
      /* {{{
      lv.2 and t = t ++ [ # {{{
          ->
              if V.auth
                  V.auth.hide !->
                      gs.setBackground []
              else if v.2
                  gs.setBackground []
              V.grid and V.grid.hide !->
                  V.grid.reset! if V.grid.reset
              # ok
              true
      ] # }}}
      lv.0 and m.0 and t = t ++ [ # {{{
          ->
              # аккордеон
              # генерируем содержимое
              V.panel.load m.0
              # определяем активную панель
              a = if m.1
                  then V.skeleton.index m.1
                  else false
              # создаем
              V.panel.accordion V.panel.cfg <<< {active: a}
              true
      ]
      # }}}
      lv.1 and m.1 and t = t ++ [ # {{{
          ->
              # ok
              true
      ]
      # }}}
      lv.2 and m.2 and t = t ++ [ # {{{
          ->
              # грид
              # формируем контент
              V.view.load \grid
              # создание
              a = CLONE V.grid.cfg # общая конфигурация
              b = V.skeleton.getBoneCfg m.2+'g' # частная конфигурация
              V.grid.w2grid a <<< b
              # метод удаления
              V.grid.reset = !->
                  # удаляем грид
                  w2ui.grid.destroy!
                  # удаляем контролы
                  V.gridControls.controlgroup \destroy
                  # удаляем метод
                  delete V.grid.reset
                  # зачищаем контент
                  V.view.load!
              # контролы грида
              # создаем
              V.gridControls.load m.2 + \gc
              V.gridControls.controlgroup {
                  items:
                      button: \button
              }
              # ok
              true
      ]
      # }}}
      }}} */
      V.skeleton.run('detach', x, m, function(){
        V.skeleton.run('attach', x, m, function(){
          V.state--;
          if (onComplete) {
            onComplete();
          }
        });
      });
      return true;
    },
    sync: undefined,
    navigate: function(nav, onComplete){
      var i$, len$, b, a;
      if (!this.sync) {
        return false;
      }
      if (nav && M.authorized) {
        M.nav.restore = false;
        for (i$ = 0, len$ = nav.length; i$ < len$; ++i$) {
          b = i$;
          a = nav[i$];
          M.nav.data[b].id = a;
          V.nav.data[b].id = '';
        }
        M.nav.restore = true;
      }
      this.sync(function(){
        V.resize(0, function(){
          V.refresh();
          if (onComplete) {
            onComplete();
          }
        });
      });
      return true;
    },
    nav: function(level, key, value, onComplete){
      if (V.state !== 0) {
        return false;
      }
      if (key === 'id') {
        M.nav[level] = value;
        this.navigate(false, onComplete);
      } else {
        M.nav[level][key] = value;
        V.nav[level][key] = value;
        V.resize(0, function(){
          V.refresh(onComplete);
        });
      }
      return true;
    },
    switchNavOpt: function(level, opt){
      var a;
      if (P.sync.state || !M.authorized) {
        return false;
      }
      a = !M.nav[level][opt];
      M.nav[level][opt] = a;
      V.nav[level][opt] = a;
      V.resize(false);
      V.refresh();
      return true;
    }
  };
  /* }}} */
  /* debug {{{
  *
  */
  M.authorized = true;
  /**/
  $('#dbg0').click(function(){
    M;
    V;
    P;
    debugger;
    /**/
  });
  $('#dbg1').click(function(){
    M.authorized = !M.authorized;
    P.init();
    /**/
  });
  $('#dbg2').click(function(){
    true;
    /**/
  });
  $('#dbg9').click(function(){
    P.init(['m2', 'm2v2', 'm2v2f1']);
    true;
    /**/
  });
  /**/
  /* }}} */
  return P.init();
};
$('document').ready(MVPApp);
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}