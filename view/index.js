// Generated by LiveScript 1.5.0
'use strict';
w3ui && w3ui.ready(function(){
  var M, V, P;
  M = w3ui.PROXY({
    init: function(){
      var a;
      a = this.nav;
      this.sav.forEach(function(save, level){
        save[''] = w3ui.CLONE(a.slice(level + 1));
      });
      return true;
    },
    nav: [
      {
        id: 'wa'
      }, {
        id: 'view'
      }, {
        id: 'menu'
      }, {
        id: ''
      }, {
        id: ''
      }
    ],
    sav: [{}, {}, {}, {}],
    authorized: true
  }, {
    set: function(obj, k, v, prx){
      var a, b, c, d;
      if (typeof k !== 'string') {
        return true;
      }
      a = parseInt(k);
      if (isNaN(a)) {
        obj[k] = v;
        return true;
      }
      k = a;
      a = obj.nav;
      b = obj.sav;
      c = a[k];
      d = k < b.length ? b[k] : null;
      if (c.id === v && v === '') {
        return true;
      }
      if (c.id === v) {
        v = '';
      }
      if (d) {
        d[c.id] = a.slice(k + 1);
        a.splice(k + 1);
        a = a.concat(w3ui.CLONE(d[v]));
      }
      c.id = v;
      return true;
    },
    get: function(obj, p, prx){
      var k;
      if (typeof p !== 'string') {
        return null;
      }
      k = parseInt(p);
      if (!isNaN(k)) {
        return obj.nav[k].id;
      }
      if (p in obj) {
        return obj[p];
      }
      return null;
    }
  });
  V = {
    init: function(id, parent, level, tid, templ){
      var a, b, c, own$ = {}.hasOwnProperty;
      id == null && (id = '');
      parent == null && (parent = null);
      level == null && (level = 0);
      tid == null && (tid = '#t');
      if (!(a = this.ui[id]) || !(b = a.cfg)) {
        console.log('getting of "' + id + '" failed');
        return false;
      }
      if (id) {
        tid = tid + '-' + id;
      }
      if (!id) {
        id = b.id;
      }
      if (!templ) {
        templ = w3ui('template', true);
        templ = templ[0].content;
      }
      b.id = id;
      b.parent = parent;
      b.level = level;
      b.nav = M.nav[level];
      if (b.render !== undefined) {
        b.render = this.render.bind(a, b.render);
      }
      if (b.attach) {
        b.attach = this.attach.bind(a, b.attach);
      }
      b.template = templ.querySelector(tid);
      b.data = {};
      b.show && (b.show = b.show.map(function(c){
        if (typeof c === 'object') {
          return c;
        }
        return c.bind(a);
      }));
      b.hide && (b.hide = b.hide.map(function(c){
        if (typeof c === 'object') {
          return c;
        }
        return c.bind(a);
      }));
      for (b in a) if (own$.call(a, b)) {
        c = a[b];
        if (b !== 'cfg' && c && c.cfg) {
          if (!this.init(b, a, level + 1, tid, templ)) {
            return false;
          }
        }
      }
      return true;
    },
    render: function(template, id){
      var a, b, c;
      id == null && (id = this.cfg.nav.id);
      if (!this.cfg.node) {
        this.cfg.node = w3ui('#' + this.cfg.id);
      }
      a = this.cfg.parent;
      b = !a || a.cfg.nav.id === this.cfg.id ? id : '';
      if (!b && id && (c = a[a.cfg.nav.id][id])) {
        this.cfg.context = c;
      }
      if (!template || !id) {
        return true;
      }
      if (!this.cfg.node) {
        return false;
      }
      if (b) {
        a = this[id].cfg.template.innerHTML;
        c = this[id];
      } else {
        a = this.cfg.template.querySelector('#' + id).innerHTML;
        c = this[id].render.call(c);
      }
      this.cfg.node[0].innerHTML = Mustache.render(a, c);
      if (b) {
        c.cfg.node = w3ui('#' + b);
      }
      return true;
    },
    attach: function(event){
      var a, b, x, e, i$, len$, d, c, ref$, own$ = {}.hasOwnProperty;
      if (!this.cfg.node) {
        return true;
      }
      if (event === true) {
        if (!(a = this.cfg.nav.id) || !(b = this[a])) {
          return true;
        }
        event = b.attach;
      }
      x = /^key.+/;
      e = [];
      for (a in event) if (own$.call(event, a)) {
        b = event[a];
        if (!Array.isArray(b)) {
          b = [b];
        }
        for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
          d = b[i$];
          c = d.el
            ? document.querySelectorAll('#' + this.cfg.id + ' ' + d.el)
            : d.el === ''
              ? [this.cfg.node[0]]
              : [document];
          d.preventDefault = !x.test(a);
          d = P.event.bind(this, d);
          e.push([c, a, d]);
        }
      }
      if (!e.length) {
        return true;
      }
      this.cfg.detach = function(){
        var i$, ref$, len$, ref1$, a, b, c;
        for (i$ = 0, len$ = (ref$ = e).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], a = ref1$[0], b = ref1$[1], c = ref1$[2];
          a.forEach(fn$);
        }
        delete this.detach;
        return true;
        function fn$(a){
          a.removeEventListener(b, c);
        }
      };
      this.cfg.detach.data = {};
      for (i$ = 0, len$ = e.length; i$ < len$; ++i$) {
        ref$ = e[i$], a = ref$[0], b = ref$[1], c = ref$[2];
        a.forEach(fn$);
      }
      return true;
      function fn$(a){
        a.addEventListener(b, c);
      }
    },
    walk: function(id, direction, func, onComplete){
      var a, walk, b, i$, len$;
      if (!(a = this.ui[id])) {
        return false;
      }
      walk = [];
      b = [a];
      while (b.length) {
        walk.push(b);
        b = b.map(fn$);
        b = b.reduce(fn1$, []);
      }
      walk = walk.reduce(function(a, b){
        return a.concat(b);
      }, []);
      if (!direction) {
        walk.reverse();
      }
      if (typeof func !== 'string') {
        return walk.every(function(node){
          return func.call(node);
        });
      }
      if (onComplete) {
        a = [];
        for (i$ = 0, len$ = walk.length; i$ < len$; ++i$) {
          b = walk[i$];
          if (b.cfg[func]) {
            a.push((fn2$.call(this, b)));
            a.push((fn3$.call(this, b)));
          }
        }
        a.push(onComplete);
        w3ui.THREAD(a);
        return true;
      }
      return walk.every(function(node){
        if (node.cfg[func]) {
          return node.cfg[func].call(node);
        } else {
          return true;
        }
      });
      function fn$(node){
        var c, a, b;
        c = [];
        for (a in node) {
          b = node[a];
          if (a !== 'cfg' && b && b.cfg) {
            c.push(b);
          }
        }
        return c;
      }
      function fn1$(a, b){
        return a.concat(b);
      }
      function fn2$(node){
        return function(){
          return node.cfg[func].call(node);
        };
      }
      function fn3$(node){
        return function(){
          return !node.cfg[func].busy;
        };
      }
    },
    ui: w3ui.PROXY({
      cfg: {
        id: 'ui',
        node: w3ui('#ui'),
        root: null,
        parent: null,
        context: null,
        data: {},
        level: 0,
        nav: null,
        render: true,
        init: function(){
          var a, b;
          a = this.cfg.nav.id;
          b = a ? V.ui[a] : null;
          V.walk(a, true, function(){
            this.cfg.root = b;
            return true;
          });
          this.cfg.root = b;
          return true;
        }
      },
      wa: {
        cfg: {
          fontSizeMin: 0,
          fontSizeMax: 0,
          init: function(){
            this.cfg.fontSizeMin = parseInt(this.cfg.node.style.fSizeMin);
            this.cfg.fontSizeMax = parseInt(this.cfg.node.style.fSizeMax);
            return true;
          }
        },
        view: {
          cfg: {
            render: true,
            init: function(){
              return true;
            },
            finit: function(){
              var a, b;
              a = this.cfg.nav.id;
              b = this.cfg.node;
              if (!b.hasClass(a)) {
                b.removeClass();
                b.addClass(a);
              }
              return true;
            }
          },
          menu: {
            cfg: {
              render: true,
              init: function(){
                var a, b;
                if (!this.cfg.data.menu) {
                  this.cfg.data.menu = this.cfg.node.query('.box');
                  this.cfg.data.time = this.cfg.show[1].duration;
                }
                while ((a = this.cfg.nav.current) === undefined) {
                  this.cfg.nav.current = 0;
                }
                while (!(b = this.cfg.nav.currentItem)) {
                  this.cfg.nav.currentItem = this.data.map(fn$);
                }
                this.cfg.data.menu['class'][a].add('active');
                return true;
                function fn$(){
                  return 0;
                }
              },
              refresh: function(){
                var data, a, i$, to$, b, c, d, e, this$ = this;
                data = this.cfg.data;
                if (!data.box) {
                  a = this.cfg.nav.current;
                  data.box = data.menu.eq(a);
                  data.btn = data.box.query('.button');
                  for (i$ = 0, to$ = data.btn.length - 1; i$ <= to$; ++i$) {
                    b = i$;
                    data.btn[b].dataset.num = b;
                    data.btn[b].dataset.id = this.data[a].list[b].id;
                  }
                  a = this.cfg.nav.currentItem[this.cfg.nav.current];
                  data.btn['class'][a].add('active');
                }
                if (!data.slide) {
                  a = this.cfg.nav.current || 0;
                  b = data.menu.length - 1;
                  c = [a > 0 ? a - 1 : b, a < b ? a + 1 : 0];
                  a = [[data.menu[a], data.menu[c[0]]], [data.menu[a], data.menu[c[1]]]];
                  c = [['0%', '100%', '-100%', '0%'], ['0%', '-100%', '100%', '0%']];
                  data.slide = a.map(function(a, index){
                    var b;
                    b = new TimelineLite({
                      paused: true,
                      data: {
                        complete: function(){
                          data.menu.propRemove('style');
                          delete data.slide;
                        }
                      }
                    });
                    b.set(a[0], {
                      transformOrigin: '0% 50%',
                      x: c[index][0],
                      zIndex: 1
                    });
                    b.set(a[1], {
                      transformOrigin: '0% 50%',
                      x: c[index][2],
                      zIndex: 2
                    });
                    b.set(a, {
                      visibility: 'visible'
                    });
                    b.addLabel('s1');
                    b.to(a[0], data.time, {
                      x: c[index][1]
                    }, 's1');
                    b.to(a[1], data.time, {
                      x: c[index][3]
                    }, 's1');
                    b.set(a[0], {
                      className: '-=active'
                    });
                    b.set(a[1], {
                      className: '+=active'
                    });
                    return b;
                  });
                }
                if (!data.drag) {
                  a = V.ui.console.cfg.data.slide;
                  b = data.slide;
                  c = [
                    new TimelineLite({
                      paused: true,
                      ease: Power3.easeInOut
                    }), new TimelineLite({
                      paused: true,
                      ease: Power3.easeInOut
                    })
                  ];
                  d = function(){
                    var a, b;
                    a = 'drag';
                    b = !this$.cfg.node.hasClass(a);
                    this$.cfg.node.toggleClass(a, b);
                  };
                  e = function(index){
                    return function(){
                      this$.cfg.node.removeClass('drag');
                      a[index].data.complete();
                      b[index].data.complete();
                      delete data.box;
                      delete data.drag;
                    };
                  };
                  c[0].add(d);
                  c[0].add(a[0].play(), 0);
                  c[0].add(b[0].play(), 0);
                  c[0].add(e(0));
                  c[1].add(d);
                  c[1].add(a[1].play(), 0);
                  c[1].add(b[1].play(), 0);
                  c[1].add(e(1));
                  data.drag = c;
                }
                return true;
              },
              show: [
                {
                  duration: 0,
                  tween: {
                    visibility: 'visible',
                    scale: 0
                  }
                }, {
                  duration: 0.8,
                  tween: {
                    scale: 1,
                    ease: Back.easeOut
                  }
                }, function(){
                  this.cfg.data.menu.addClass('attached');
                }
              ],
              hide: [
                function(){
                  this.cfg.data.menu.removeClass('attached');
                }, {
                  duration: 0.8,
                  tween: {
                    scale: 0,
                    ease: Power3.easeIn
                  }
                }
              ],
              attach: {
                click: {
                  el: '.button'
                },
                pointerover: {
                  el: '.button'
                },
                pointerdown: {
                  el: ''
                },
                pointermove: {
                  el: ''
                },
                pointerup: {
                  el: ''
                },
                keydown: {
                  keys: ['ArrowUp', 'ArrowDown']
                }
              }
            },
            data: [
              {
                id: 'card',
                name: 'Картотека',
                list: [
                  {
                    id: 'address',
                    name: 'Адреса'
                  }, {
                    id: 'counterparty',
                    name: 'Контрагенты'
                  }
                ]
              }, {
                id: 'income',
                name: 'Входящие',
                list: [
                  {
                    id: 'accrual',
                    name: 'Начисления'
                  }, {
                    id: 'payment',
                    name: 'Оплата'
                  }, {
                    id: 'storno',
                    name: 'Сторно'
                  }
                ]
              }, {
                id: 'outcome',
                name: 'Исходящие',
                list: [
                  {
                    id: 'calc',
                    name: 'Расчеты'
                  }, {
                    id: 'document',
                    name: 'Отчеты'
                  }
                ]
              }
            ]
          },
          address: {
            cfg: {
              refresh: function(){
                return true;
              },
              show: [
                {
                  duration: 0,
                  tween: {
                    visibility: 'visible',
                    scale: 0
                  }
                }, {
                  duration: 0.8,
                  tween: {
                    scale: 1,
                    ease: Back.easeOut
                  }
                }
              ],
              hide: [{
                duration: 0.8,
                tween: {
                  scale: 0,
                  ease: Back.easeIn
                }
              }]
            },
            tab: [
              {
                id: 'a0',
                name: 'квартира'
              }, {
                id: 'a1',
                name: 'дом'
              }, {
                id: 'a2',
                name: 'улица'
              }, {
                id: 'a3',
                name: 'район'
              }, {
                id: 'a4',
                name: 'город'
              }
            ]
          },
          config: {
            empty: true
          }
        },
        header: {
          cfg: {
            render: false,
            init: function(){
              var c, d, a, b;
              c = this.cfg;
              d = c.data;
              if (!d.title) {
                d.title = c.node.query('.title');
                d.mode = c.node.query('.mode .button');
                d.config = c.node.query('.config .button');
              }
              c.show[1].tween.className = '+=on ' + c.nav.id;
              a = c.context ? c.context.cfg.id : '';
              d.title.$text = a ? this.title[a] : '';
              d.title.html(d.title.$text);
              if (a) {
                c = c.template;
                b = a === 'menu' ? 'return' : 'menu';
                d.mode.$text = this.mode[b];
                d.mode.$icon = c.querySelector('#' + b).innerHTML;
                b = a === 'config' ? 'close' : 'config';
                d.config.$text = this.config[b];
                d.config.$icon = c.querySelector('#' + b).innerHTML;
              }
              d.mode.toggleClass('disabled', !a);
              d.config.toggleClass('disabled', !a);
              d.buttonSwitch = function(){
                var a;
                a = [
                  new TimelineLite({
                    paused: true,
                    ease: Power2.easeIn
                  }), new TimelineLite({
                    paused: true,
                    ease: Power2.easeIn
                  })
                ];
                a = [[a[0], 'text', 'icon'], [a[1], 'icon', 'text']];
                a = a.map(function(a, index){
                  a[0].to(d.mode, 0.4, {
                    className: '-=' + a[1],
                    scale: 0
                  }, 0);
                  a[0].to(d.config, 0.4, {
                    className: '-=' + a[1],
                    scale: 0
                  }, 0);
                  a[0].add((function(a){
                    return function(){
                      d.mode[0].innerHTML = d.mode[a];
                      d.config[0].innerHTML = d.config[a];
                    };
                  }.call(this, '$' + a[2])));
                  a[0].addLabel('L1');
                  a[0].to(d.mode, 0.4, {
                    className: '+=' + a[2],
                    scale: 1
                  }, 'L1');
                  a[0].to(d.config, 0.4, {
                    className: '+=' + a[2],
                    scale: 1
                  }, 'L1');
                  a[0].add(function(){
                    d.mode.propRemove('style');
                    d.config.propRemove('style');
                  });
                  return a[0];
                });
                return a;
              }();
              d.buttonResize = function(){
                var a, b, useIcon;
                a = d.buttonResize;
                b = d.buttonSwitch.some(function(a){
                  return a.isActive();
                });
                if (b || d.mode.style.fontSize < 0.0001) {
                  if (a.timer) {
                    window.clearTimeout(a.timer);
                  }
                  a.timer = window.setTimeout(d.buttonResize, 500);
                  return;
                }
                useIcon = [d.mode, d.config].some(function(el){
                  var a;
                  if (el.$text) {
                    a = el.box.textMetrics(el.$text).width;
                    if (el.box.innerWidth < a) {
                      return true;
                    }
                  }
                  return false;
                });
                a = d.mode['class'][0];
                if (useIcon && !a.contains('icon')) {
                  a = 0;
                } else if (!useIcon && !a.contains('text')) {
                  a = 1;
                } else {
                  return;
                }
                a = d.buttonSwitch[a];
                a.play(0);
              };
              return true;
            },
            resize: function(){
              var c, d, a, b;
              c = this.cfg;
              d = c.data;
              a = d.title.box.fontSize(d.title.$text);
              b = [c.root.cfg.fontSizeMin, c.root.cfg.fontSizeMax];
              if (a < b[0]) {
                a = 0;
              }
              if (a > b[1]) {
                a = b[1];
              }
              c.root.cfg.node.style.fSize0 = a + 'px';
              d.buttonResize();
              return true;
            },
            show: [
              {
                duration: 0,
                tween: {
                  visibility: 'visible'
                }
              }, {
                duration: 0.8,
                tween: {
                  className: '',
                  opacity: 1,
                  ease: Power3.easeOut
                }
              }, function(){
                this.cfg.resize.call(this);
              }
            ],
            hide: [
              {
                duration: 0.2,
                tween: {
                  opacity: 0,
                  ease: Power3.easeIn
                }
              }, {
                duration: 0.4,
                tween: {
                  className: '',
                  ease: Power3.easeIn
                }
              }
            ]
          },
          attach: {
            click: [
              {
                el: '.back .button',
                id: 'back'
              }, {
                el: '.config .button',
                id: 'config'
              }
            ]
          },
          title: {
            menu: 'Главное меню',
            address: 'Картотека адресов',
            config: 'Конфигурация'
          },
          mode: {
            menu: 'меню',
            'return': 'возврат'
          },
          config: {
            config: 'настройки',
            close: 'закрыть'
          }
        },
        console: {
          cfg: {
            render: true,
            attach: true,
            init: function(){
              this.cfg.show[1].tween.className = '+=on ' + this.cfg.nav.id;
              return true;
            },
            resize: function(){
              var a, ref$, own$ = {}.hasOwnProperty;
              for (a in ref$ = this.cfg.data) if (own$.call(ref$, a)) {
                delete this.cfg.data[a];
              }
              return this.cfg.refresh.call(this);
            },
            refresh: function(){
              var a, b;
              a = this.cfg.nav.id;
              b = this[a];
              if (!b || !b.refresh) {
                return true;
              }
              return b.refresh.call(this, this.cfg.data);
            },
            show: [
              {
                duration: 0,
                tween: {
                  visibility: 'visible'
                }
              }, {
                duration: 0.8,
                tween: {
                  className: '',
                  opacity: 1,
                  ease: Power3.easeOut
                }
              }
            ],
            hide: [
              {
                duration: 0.2,
                tween: {
                  opacity: 0,
                  ease: Power3.easeIn
                }
              }, {
                duration: 0.4,
                tween: {
                  className: '',
                  ease: Power3.easeIn
                }
              }
            ]
          },
          menu: {
            attach: {
              pointerover: [
                {
                  el: '.button.left',
                  id: 'left'
                }, {
                  el: '.button.right',
                  id: 'right'
                }
              ],
              pointerout: [
                {
                  el: '.button.left',
                  id: 'left'
                }, {
                  el: '.button.right',
                  id: 'right'
                }
              ],
              click: [
                {
                  el: '.button.left',
                  id: 'left',
                  delayed: true
                }, {
                  el: '.button.right',
                  id: 'right',
                  delayed: true
                }
              ],
              keydown: {
                keys: ['ArrowLeft', 'ArrowRight', 'Enter'],
                delayed: true
              }
            },
            render: function(){
              var a, b, c, d;
              a = this.data;
              b = this.cfg.nav.current || 0;
              c = a.length - 1;
              d = a.map(function(item){
                return {
                  id: item.id,
                  name: item.name
                };
              });
              return {
                list: d,
                current: a[b].name,
                prev: b
                  ? a[b - 1].name
                  : a[a.length - 1].name,
                next: b === c
                  ? a[0].name
                  : a[b + 1].name
              };
            },
            refresh: function(data){
              var a, b, main, c;
              if (!data.node) {
                data.node = this.cfg.node.query('.carousel');
                data.time = this.cfg.show[1].duration;
              }
              if (!data.box) {
                data.box = data.node.query('.item');
                data.btn = data.node.query('.button');
              }
              if (!data.hover) {
                a = data.box;
                b = data.btn;
                data.hover = [1, 3].map(function(index){
                  var c;
                  c = new TimelineLite({
                    paused: true,
                    ease: Power2.easeOut
                  });
                  c.add((function(a, b){
                    return function(){
                      a.removeClass('hover');
                      b.removeClass('hover');
                    };
                  }.call(this, a, b)));
                  c.to([a[index], b[index], a[2], b[2]], data.time, {
                    className: '+=hover'
                  });
                  return c;
                });
              }
              if (!data.slide) {
                main = this.cfg.context;
                a = main.cfg.nav.current || 0;
                b = main.data.length - 1;
                c = [
                  a > 1
                    ? a - 2
                    : a - 1 + b, a + 2 <= b
                    ? a + 2
                    : a + 1 - b
                ];
                data.btn[0].innerHTML = main.data[c[0]].name;
                data.btn[4].innerHTML = main.data[c[1]].name;
                a = [data.box.node[0].clone(), data.box.node[4].clone()];
                b = [w3ui('.button', true, a[0]), w3ui('.button', true, a[1])];
                a = [[a[0], b[0][0]], [a[1], b[1][0]]];
                data.slide = a.map(function(box, index){
                  var a, b;
                  a = new TimelineMax({
                    paused: true,
                    data: {
                      complete: function(){
                        data.box.propRemove('style');
                        data.btn.propRemove('style');
                        if (index) {
                          data.node.node.append(box[0]);
                          data.box.node[0].remove();
                        } else {
                          data.node.node.prepend(box[0]);
                          data.box.node[4].remove();
                        }
                        delete data.box;
                        delete data.hover;
                        delete data.slide;
                      }
                    }
                  });
                  if (index) {
                    b = [['+=hidden', '-=active', '+=active', '-=hidden'], ['+=hidden', 'button left', 'button center', '-=hidden']];
                  } else {
                    b = [['-=hidden', '+=active', '-=active', '+=hidden'], ['-=hidden', 'button center', 'button right', '+=hidden']];
                  }
                  a.to(data.box[index + 0], data.time, {
                    className: b[0][0]
                  }, 0);
                  a.to(data.box[index + 1], data.time, {
                    className: b[0][1]
                  }, 0);
                  a.to(data.box[index + 2], data.time, {
                    className: b[0][2]
                  }, 0);
                  a.to(data.box[index + 3], data.time, {
                    className: b[0][3]
                  }, 0);
                  a.to(data.btn[index + 0], data.time, {
                    className: b[1][0]
                  }, 0);
                  a.to(data.btn[index + 1], data.time, {
                    className: b[1][1]
                  }, 0);
                  a.to(data.btn[index + 2], data.time, {
                    className: b[1][2]
                  }, 0);
                  a.to(data.btn[index + 3], data.time, {
                    className: b[1][3]
                  }, 0);
                  return a;
                });
              }
              return true;
            }
          }
        }
      }
    }, {
      get: function(obj, id, prx){
        var a, b, k, v, own$ = {}.hasOwnProperty;
        if (!id) {
          return obj;
        }
        if (obj[id] && obj[id].cfg) {
          return obj[id];
        }
        if (!obj.cfg) {
          return null;
        }
        a = [obj];
        while (a.length) {
          b = a.pop();
          for (k in b) if (own$.call(b, k)) {
            v = b[k];
            if (k !== 'cfg' && v && v.cfg) {
              if (v[id] && v[id].cfg) {
                return v[id];
              }
              a.push(v);
            }
          }
        }
        return null;
      }
    })
  };
  P = {
    init: function(){
      if (!M.init() || !V.init()) {
        console.log('init() failed');
        return false;
      }
      P.construct();
      window.addEventListener('resize', this.resize.bind(this));
      return true;
    },
    construct: function(id){
      var me, node, lock;
      id == null && (id = '');
      me = this.construct;
      node = V.ui[id];
      lock = false;
      w3ui.THREAD([
        function(){
          var a;
          if (me.busy) {
            return false;
          }
          me.busy = true;
          if (!V.walk(id, false, 'detach')) {
            console.log('detach failed');
            delete me.busy;
            return null;
          }
          a = new TimelineLite({
            paused: true
          });
          V.walk(id, false, function(){
            var node, b;
            if (!(node = this.cfg.node)) {
              return true;
            }
            b = new TimelineLite({
              paused: true
            });
            this.cfg.hide && this.cfg.hide.forEach(function(a){
              var c;
              if (a.tween) {
                c = w3ui.CLONE(a.tween);
                b.to(node, a.duration, c);
              } else {
                b.add(a);
              }
            });
            a.add(b.play(), 0);
            return true;
          });
          a.add(function(){
            lock = false;
          });
          lock = true;
          a.play();
          return true;
        }, function(){
          return !lock;
        }, function(){
          var a, b;
          V.walk(id, false, function(){
            var a;
            if (this.cfg.node && (a = this.cfg.level) && this.cfg.id !== M[a - 1]) {
              this.cfg.node = null;
            }
            return true;
          });
          a = ['render', 'init', 'resize', 'refresh'].every(function(f){
            return V.walk(id, true, f);
          });
          if (!a) {
            console.log('render sequence failed');
            delete me.busy;
            return null;
          }
          a = new TimelineLite({
            paused: true
          });
          b = 'L' + node.cfg.level;
          a.addLabel(b, 0);
          V.walk(id, true, function(){
            var node, c;
            if (!(node = this.cfg.node)) {
              return true;
            }
            c = new TimelineLite({
              paused: true
            });
            this.cfg.show && this.cfg.show.forEach(function(a){
              var b;
              if (a.tween) {
                b = w3ui.CLONE(a.tween);
                c.to(node, a.duration, b);
              } else {
                c.add(a);
              }
            });
            if (b !== 'L' + this.cfg.level) {
              b = 'L' + this.cfg.level;
              a.addLabel(b);
            }
            a.add(c.play(), b);
            return true;
          });
          a.add(function(){
            lock = false;
          });
          lock = true;
          a.play();
          return true;
        }, function(){
          return !lock;
        }, function(){
          V.walk(id, false, 'finit');
          if (!V.walk(id, true, 'attach')) {
            console.log('attach failed');
          }
          delete me.busy;
          return true;
        }
      ]);
    },
    update: function(id){
      id == null && (id = M[0]);
      ['refresh', 'detach', 'attach'].every(function(f){
        return V.walk(id, true, f);
      });
      delete P.event.busy;
    },
    resize: function(){
      var me, f;
      me = this.resize;
      if (me.timer) {
        window.clearTimeout(me.timer);
        f = me.bind(this);
        me.timer = window.setTimeout(f, 250);
      } else if (!V.walk('', true, 'resize')) {
        console.log('resize failed');
      }
    },
    event: function(data, event){
      var me, a, cfg, nav;
      me = P.event;
      if (data.preventDefault) {
        event.preventDefault();
      }
      if (P.construct.busy || !this.cfg.detach || me.busy && !data.delayed) {
        return true;
      }
      if (me.busy) {
        event.stopPropagation();
        a = !!me.delayed;
        me.delayed = me.bind(this, data, event);
        if (a) {
          return false;
        }
        if (typeof me.busy === 'object') {
          me.busy.timeScale(2);
        }
        w3ui.THREAD([function(){
          if (me.busy) {
            return false;
          }
          me.delayed();
          delete me.delayed;
          return true;
        }]);
        return false;
      }
      cfg = this.cfg;
      nav = this.cfg.nav;
      event.data = data;
      data = cfg.detach.data;
      me.busy = P.react.apply(this, [event, data, cfg, nav]);
      return true;
    },
    react: function(event, data, cfg, nav){
      var a, b, c, d, e, this$ = this;
      switch (cfg.id) {
      case 'menu':
        !data.change && (data.change = function(active){
          var a, b;
          a = nav.current || 0;
          b = this$.data.length - 1;
          if (active) {
            a = a > 0 ? a - 1 : b;
          } else {
            a = a < b ? a + 1 : 0;
          }
          nav.current = a;
        });
        switch (event.type) {
        case 'pointerdown':
          a = document.elementFromPoint(event.pageX, event.pageY);
          if (a.className === 'button') {
            break;
          }
          event.stopPropagation();
          data.swipe = event.pointerType !== 'mouse';
          data.size = 0.5 * cfg.node.box.innerWidth;
          data.x = event.pageX;
          data.active = false;
          data.drag = V.ui.menu.cfg.data.drag;
          break;
        case 'pointermove':
          if (!data.drag) {
            break;
          }
          event.stopPropagation();
          if ((a = event.pageX - data.x) < 0) {
            b = [0, 1];
          } else {
            b = [1, 0];
          }
          if ((a = Math.abs(a)) < 0.1) {
            if (!data.swipe) {
              break;
            }
            delete data.drag;
            break;
          }
          c = b.map(function(index){
            return data.drag[index];
          });
          a = a / data.size;
          if (a > 0.99) {
            a = 0.99;
          }
          if (data.swipe) {
            data.change(b[0]);
            delete data.drag;
            c[1].add(P.update);
            return c[1].play();
          }
          d = !data.active || data.active[0] !== b[0];
          e = d || Math.abs(a - c[1].progress()) > 0.001;
          if (d) {
            if (!c[0].paused()) {
              c[0].pause();
            }
            c[0].progress(0);
          }
          if (e) {
            if (!c[1].paused()) {
              c[1].pause();
            }
            c[1].progress(a);
          }
          data.active = b;
          break;
        case 'pointerup':
          if (!data.drag || data.swipe) {
            break;
          }
          event.stopPropagation();
          if (!(a = data.active)) {
            delete data.drag;
            break;
          }
          b = data.drag[a[1]].progress();
          if (b < 0.35) {
            data.drag[a[1]].reverse();
            delete data.drag;
            break;
          }
          data.change(a[0]);
          a = data.drag[a[1]];
          a.add(P.update);
          return a.play();
        case 'pointerover':
          if ((a = event.target.dataset.num) === undefined) {
            break;
          }
          event.stopPropagation();
          nav.currentItem[nav.current] = +a;
          b = cfg.data.btn;
          b.removeClass('active');
          b['class'][a].add('active');
          true;
          break;
        case 'keydown':
          a = event.data.keys.indexOf(event.key);
          if (a < 0) {
            break;
          }
          event.preventDefault();
          event.stopImmediatePropagation();
          b = nav.currentItem[nav.current];
          c = cfg.data.btn;
          if (a) {
            a = b < c.length - 1 ? b + 1 : 0;
          } else {
            a = b > 0
              ? b - 1
              : c.length - 1;
          }
          nav.currentItem[nav.current] = a;
          c.removeClass('active');
          c.eq(a).addClass('active');
          break;
        case 'click':
          event.stopPropagation();
          a = cfg.level - 1;
          b = event.target.dataset.id;
          M[a] = b;
          P.construct();
        }
        break;
      case 'console':
        switch (nav.id) {
        case 'menu':
          !data.change && (data.change = function(id){
            var c, a, b, d;
            c = cfg.level + 1;
            a = M.nav[c].current || 0;
            b = cfg.context.data.length - 1;
            if (id) {
              b = a < b ? a + 1 : 0;
            } else {
              b = a > 0 ? a - 1 : b;
            }
            M.nav[c].current = b;
            a = V.ui.console.cfg.data.hover;
            b = V.ui.menu.cfg.data.drag[id];
            c = [a[0].progress() > 0.0001, a[1].progress() > 0.0001];
            if (c[0] || c[1]) {
              d = b;
              b = new TimelineLite({
                paused: true,
                ease: Power3.easeInOut
              });
              if (c[0]) {
                b.add(a[0].reverse().timeScale(2, 0));
              }
              if (c[1]) {
                b.add(a[1].reverse().timeScale(2, 0));
              }
              b.add(d.play(0));
            }
            b.add(P.update);
            return b.play();
          });
          switch (event.type) {
          case 'pointerover':
            event.stopPropagation();
            a = V.ui.console.cfg.data.hover;
            b = event.data.id === 'left' ? 0 : 1;
            a[b].play();
            break;
          case 'pointerout':
            event.stopPropagation();
            a = V.ui.console.cfg.data.hover;
            b = event.data.id === 'left' ? 0 : 1;
            a[b].reverse();
            break;
          case 'click':
            event.stopPropagation();
            a = event.data.id === 'left' ? 0 : 1;
            return data.change(a);
          case 'keydown':
            a = event.data.keys.indexOf(event.key);
            if (a < 0) {
              break;
            }
            event.preventDefault();
            event.stopImmediatePropagation();
            if (a < 2) {
              return data.change(a);
            }
            a = cfg.context.cfg.data.btn.find(function(node){
              return node.classList.contains('active');
            });
            if (!a) {
              break;
            }
            a = a.dataset.id;
            M[cfg.level] = a;
            P.construct();
          }
        }
      }
      return false;
    }
  };
  if (M && V && P) {
    return P.init();
  }
});