// Generated by LiveScript 1.5.0
"use strict";
var toString$ = {}.toString;
w3ui && (w3ui.accordion = {
  options: {
    ORDER: ['panels', 'multiSelect', 'deactivation'],
    multiSelect: false,
    deepDive: 0,
    deactivation: true,
    deactivateChildren: true,
    contentBoxFirst: false,
    extraHover: false,
    extraActive: false,
    nextLevelSize: 1,
    events: {
      hover: null,
      unhover: null,
      select: null,
      selectComplete: null
    },
    panels: null
  },
  data: {
    INIT: ['panels'],
    animation: {
      hover: [
        {
          duration: 0.4,
          to: {
            className: '+=hovered',
            ease: Bounce.easeOut
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '+=hovered',
            ease: Power2.easeOut
          }
        }, {
          position: 0,
          duration: 0.6,
          to: {
            className: '+=hovered',
            ease: Power2.easeOut
          }
        }
      ],
      unhover: [
        {
          duration: 0.4,
          to: {
            className: '-=hovered',
            ease: Power2.easeIn
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '-=hovered',
            ease: Power2.easeIn
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '-=hovered',
            ease: Power2.easeIn
          }
        }
      ],
      resize: [{
        duration: 0.4,
        to: {
          css: {},
          ease: Power2.easeInOut
        }
      }],
      activate: [
        {
          duration: 0,
          to: {
            css: {},
            autoCSS: false
          }
        }, {
          duration: 0.2,
          to: {
            className: '+=active',
            ease: Power2.easeIn
          }
        }, {
          duration: 0.4,
          to: {
            className: '+=active',
            ease: Power1.easeOut
          }
        }, {
          position: '-=0.3',
          duration: 0.2,
          to: {
            className: '+=active',
            ease: Power2.easeIn
          }
        }
      ],
      deactivate: [
        {
          duration: 0.3,
          to: {
            className: '-=active',
            ease: Power2.easeIn
          }
        }, {
          position: '-=0.3',
          duration: 0.4,
          to: {
            className: '-=active',
            ease: Power1.easeIn
          }
        }, {
          duration: 0.2,
          to: {
            className: '-=active',
            ease: Power2.easeOut
          }
        }
      ],
      enlarge: [{
        duration: 0.4,
        to: {
          css: {},
          ease: Power2.easeOut
        }
      }],
      shrink: [{
        duration: 0.4,
        to: {
          css: {},
          ease: Power1.easeIn
        }
      }],
      show: [{
        duration: 0.4,
        to: {
          className: '-=hidden',
          ease: Power1.easeOut
        }
      }],
      hide: [{
        duration: 0.4,
        to: {
          className: '+=hidden',
          ease: Power1.easeIn
        }
      }],
      showTitle: [
        {
          duration: 0.4,
          to: {
            className: '-=hidden',
            ease: Power1.easeOut
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '-=hiddenTitle',
            ease: Power1.easeOut
          }
        }
      ],
      hideTitle: [
        {
          duration: 0.4,
          to: {
            className: '+=hidden',
            ease: Power1.easeIn
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '+=hiddenTitle',
            ease: Power1.easeIn
          }
        }
      ],
      setClass: [{
        duration: 0.2,
        to: {
          className: '',
          ease: Power2.easeInOut,
          overwrite: 0
        }
      }]
    },
    events: [
      {
        id: 'hover',
        event: 'pointerenter',
        el: '.title'
      }, {
        id: 'unhover',
        event: 'pointerleave',
        el: '.title'
      }, {
        id: 'select',
        event: 'click',
        el: '.title'
      }
    ]
  },
  style: ['titleSize', 'titleFontSize', 'panelSize'],
  api: {
    none: true
  },
  create: function(){
    if (!this.panels.create()) {
      this.log('failed to create panels');
      return false;
    }
    return true;
  },
  resize: function(){
    var a;
    if (a = this.panels.resize()) {
      a.progress(1);
    }
  },
  setup: function(name, opt){
    switch (name) {
    case 'panels':
      this.panels = opt;
    }
    return opt;
  },
  animation: function(name){
    switch (name) {
    case 'resize':
      return this.panels.resize();
    }
    return null;
  },
  react: function(data, event){
    var id, a, b;
    switch (id = data.id) {
    case 'hover':
    case 'unhover':
      a = event.currentTarget.dataset.id;
      b = id === 'hover';
      this.panels.hover(a, b);
      break;
    case 'select':
      if (a = event.currentTarget.dataset.id) {
        this.panels.select(a);
      }
      break;
    default:
      return false;
    }
    return true;
  },
  panels: function(){
    var createNodes, getItem, getItemList, initData, initAnimations, getAnimation, stopAnimations, createHoverAnimation, resizeInit, resizePanels;
    createNodes = function(data, opts, box){
      var list, i$, len$, index, el, a, b, c;
      list = [];
      if (!box) {
        box = w3ui(document.createElement('div'));
        box['class'].add('box');
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        if (!el.hidden) {
          list.push(el);
        }
        a = Array(11).fill(0).map(fn$);
        el.nodeParent = box;
        el.nodePanel = w3ui(a[0]);
        el.nodeBox = w3ui([a[1], a[2]]);
        el.node = w3ui([a[3], a[4]]);
        el.nodeTitle = w3ui([a[5], a[6], a[7]]);
        el.nodeContent = w3ui([a[8], a[9], a[10]]);
        el.nodes = w3ui(a);
        el.node[0].child.add(el.nodeTitle);
        el.node[1].child.add(el.nodeContent);
        el.nodeBox[0].child.add(el.node[0]);
        el.nodeBox[1].child.add(el.node[1]);
        if (el.contentBoxFirst || opts.contentBoxFirst) {
          el.nodePanel.child.add(el.nodeBox[1]);
          el.nodePanel.child.add(el.nodeBox[0]);
        } else {
          el.nodePanel.child.add(el.nodeBox);
        }
        box.child.add(el.nodePanel);
        el.nodePanel['class'] = 'panel';
        el.nodeBox[0]['class'] = 'titleSizer';
        el.nodeBox[1]['class'] = 'contentSizer';
        el.node[0]['class'] = 'title';
        el.node[1]['class'] = 'content';
        el.nodeTitle.forEach(fn1$);
        el.nodeContent.forEach(fn2$);
        if (el.hidden) {
          el.nodePanel['class'].add('hidden');
          el.active = false;
        }
        if (el.active) {
          el.nodes.classAdd('active');
        }
        if (el.disabled) {
          el.nodes.classAdd('disabled');
        }
        el.nodes.props.dataId = el.id;
        a = el.level % 2 === 0 ? 'EVEN' : 'ODD';
        el.nodes.classAdd(a);
        a = el.contentBoxFirst || opts.contentBoxFirst ? 'ORDER_B' : 'ORDER_A';
        el.node.classAdd(a);
        if (el.firstElement) {
          a = 'FIRST';
          el.nodePanel['class'].add(a);
          el.node.classAdd(a);
        }
        if (el.lastElement) {
          a = 'LAST';
          el.nodePanel['class'].add(a);
          el.node.classAdd(a);
        }
        el.nodeTitle[1].html = el.title;
        if ('content' in el) {
          a = el.nodeContent;
          b = el.content;
          if (toString$.call(b).slice(8, -1) === 'Array') {
            if (b[0]) {
              a[0].html = b[0];
              a[0]['class'].add('N1');
            }
            if (b[2]) {
              a[2].html = b[2];
              a[2]['class'].add('N1');
            }
          } else if (!el.panels) {
            a[1].html = b;
          } else {
            a[0].html = b;
            a[0]['class'].add('N1');
          }
          a = el.nodeContent;
          b = [-1, -1];
          if (c = el.contentSize) {
            if (toString$.call(c).slice(8, -1) === 'Array') {
              if (c[0]) {
                b[0] = c[0];
              }
              if (c[1]) {
                b[1] = c[1];
              }
            } else {
              b[0] = c;
            }
          } else {
            if (a[0]['class'].has('N1')) {
              b[0] = 100 * a[0].outterHeight / size[3];
            }
            if (a[2]['class'].has('N1')) {
              b[1] = 100 * a[2].outterHeight / size[3];
            }
          }
          c = 100;
          if (b[0] >= 0) {
            a[0].style.height = b[0] + '%';
            c = c - b[0];
          }
          if (b[1] >= 0) {
            a[2].style.height = b[1] + '%';
            c = c - b[1];
          }
          a[1].style.height = c + '%';
        }
        if (el.panels) {
          createNodes(el.panels, opts, el.nodeContent[1]);
        }
      }
      box['class'].add('L' + data[0].level);
      function fn$(){
        return document.createElement('div');
      }
      function fn1$(el, index){
        el['class'] = 'box N' + index;
      }
      function fn2$(el, index){
        el['class'] = 'box N' + index;
      }
    };
    getItem = function(id, data){
      var i$, len$, el, a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.id === id) {
          return el;
        }
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.panels) {
          if (a = getItem(id, el.panels)) {
            return a;
          }
        }
      }
      return null;
    };
    getItemList = function(data){
      var list, i$, len$, a;
      if (!data) {
        return [];
      }
      list = data;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        a = data[i$];
        if (a.panels) {
          list = list.concat(getItemList(a.panels));
        }
      }
      return list;
    };
    initData = function(data, parent){
      var i$, len$, index, el;
      parent == null && (parent = null);
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        el.parent = parent;
        el.index = index;
        el.level = parent ? parent.level + 1 : 0;
        el.animation = {};
        if (!el.id) {
          el.id = el.level + '#' + index;
        }
        el.hidden = !!el.hidden;
        el.active = !!el.active;
        el.disabled = !!el.disabled;
        el.firstElement = index === 0;
        el.lastElement = index === data.length - 1;
        el.deepDived = false;
        if (el.panels && !initData(el.panels, el)) {
          return false;
        }
      }
      return true;
    };
    initAnimations = function(data, animation){
      var i$, len$, el, a, b;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        for (a in animation) {
          b = animation[a];
          el.animation[a] = getAnimation(el, a, animation);
        }
        el.animation.hovering = new TimelineLite({});
        if (el.panels) {
          initAnimations(el.panels, animation);
        }
      }
    };
    getAnimation = function(el, animName, animData){
      var a;
      a = w3ui.CLONE(animData[animName]);
      switch (animName) {
      case 'hover':
      case 'unhover':
        a[0].node = el.nodeTitle.nodes;
        a[1].node = el.nodeContent.nodes;
        a[2].node = el.node.nodes.concat(el.nodePanel.nodes);
        a = w3ui.GSAP.queue(a);
        break;
      case 'activate':
        a[0].node = el.nodeBox[1].node;
        a[1].node = el.nodePanel.nodes.concat([el.nodeBox[0].node], el.node.nodes, el.nodeTitle.nodes);
        a[2].node = el.nodeBox[1].node;
        a[3].node = el.nodeContent.nodes;
        break;
      case 'deactivate':
        a[0].node = el.nodeContent.nodes;
        a[1].node = el.nodeBox[1].node;
        a[2].node = el.nodePanel.nodes.concat([el.nodeBox[0].node], el.node.nodes, el.nodeTitle.nodes);
        break;
      case 'resize':
      case 'enlarge':
      case 'shrink':
        a[0].node = el.nodeBox[1].node;
        break;
      case 'show':
      case 'hide':
        a[0].node = el.nodePanel.node;
        break;
      case 'showTitle':
      case 'hideTitle':
        a[0].node = el.nodeBox[0].node;
        a[1].node = el.nodePanel.nodes.concat(el.node[1].nodes, el.nodeContent.nodes);
        break;
      case 'setClass':
        a[0].node = el.nodePanel.nodes.concat(el.node.nodes);
      }
      return a;
    };
    stopAnimations = function(data){
      var i$, len$, el, a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        a = el.animation;
        if (a.hovering.isActive()) {
          a.hovering.progress(1);
        }
      }
    };
    createHoverAnimation = function(list){
      var b, i$, len$, el, a;
      if (!list || !list.length) {
        return null;
      }
      b = [];
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        el = list[i$];
        if (el.hovered === el.nodePanel['class'].has('hovered')) {
          continue;
        }
        a = el.hovered
          ? el.animation.hover
          : el.animation.unhover;
        b.push(a.invalidate());
      }
      if (!b.length) {
        return null;
      }
      a = new TimelineLite({
        paused: true
      });
      for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
        el = b[i$];
        a.add(el.play(), 0);
      }
      return a;
    };
    resizeInit = function(data, parent){
      var a, i$, len$, el, b;
      a = data[0].node[0].box;
      a = a.borderHeight + a.paddingHeight;
      data.titleGap = a;
      a = 0;
      if (data.length > 1) {
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          el = data[i$];
          b = el.nodePanel.box;
          a = a + b.borderHeight + b.paddingHeight;
        }
      }
      data.panelsGap = a;
      a = 0;
      if (parent) {
        b = parent.nodeContent[1].box;
        a = b.borderHeight + b.paddingHeight;
      }
      data.boxGap = a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        a = data[i$];
        if (a.panels) {
          b = a.nodeContent[1].box;
          a.contentGap = b.borderHeight + b.paddingHeight;
          resizeInit(a.panels, a);
        }
      }
    };
    resizePanels = function(data, parentData){
      var lst0, lst1, i$, len$, el, c, b, a;
      parentData == null && (parentData = data);
      lst0 = [];
      lst1 = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (!el.hidden) {
          if (!el.hiddenTitle) {
            lst0.push(el);
          }
          if (el.active) {
            lst1.push(el);
          }
        }
      }
      c = data.boxSize;
      if (lst0.length) {
        c = c - data.titleSize * lst0.length;
        if (lst0.length > 1) {
          c = c - data.panelsGap;
        }
      }
      if (c < 0) {
        c = 0;
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        el.panelSize = 0;
      }
      if (b = lst1.length) {
        a = 0;
        for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
          el = lst1[i$];
          if (el.size) {
            el.panelSize = el.size * c / 100.0;
          } else {
            el.panelSize = c / b;
          }
          a = a + el.panelSize;
        }
        a = c - a;
        if (Math.abs(a) > 0.001) {
          a = a / b;
          for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
            el = lst1[i$];
            el.panelSize = el.panelSize + a;
          }
          a = 0;
          for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
            el = lst1[i$];
            if (el.panelSize < 0) {
              a = a + el.panelSize;
              el.panelSize = 0;
            }
          }
          if (a < 0) {
            c = [];
            for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
              el = lst1[i$];
              if (el.panelSize > 0) {
                c.push(el);
              }
            }
            a = a / c.length;
            for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
              el = c[i$];
              el.panelSize = el.panelSize + a;
            }
          }
        }
      }
      for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
        el = lst1[i$];
        if (a = el.panels) {
          a.boxSize = el.hiddenTitle
            ? el.panelSize
            : el.panelSize - a.boxGap;
          b = parentData.titleSize;
          if (b * lst0.length > el.panelSize) {
            if ((b = el.panelSize / lst0.length) < 1) {
              b = 0;
            }
          }
          a.titleSize = b;
          b = parentData.titleFontSize;
          if ((c = a.titleSize - parentData.titleGap) > 0) {
            if (b > c) {
              b = c;
            }
          } else {
            b = 0;
          }
          a.titleFontSize = b;
        }
      }
      for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
        el = lst1[i$];
        if (el.panels) {
          resizePanels(el.panels, data);
        }
      }
    };
    return function(){
      var DATA, resizeContainer, createResizeAnimation, unlockResizeAnimation, create, destroy, resize, hover, select, this$ = this;
      DATA = [];
      resizeContainer = function(){
        var data, el, a, b;
        data = DATA;
        el = data[0];
        a = el.nodeParent.box.innerHeight;
        data.boxSize = a < 1 ? 0 : a;
        if ((a = this$.style.titleFontSize) === 0) {
          a = this$.node.style.fontSize;
        } else if (typeof a === 'string') {
          b = el.nodeTitle[1].style;
          b.fontSize = a;
          a = b.fontSize;
          b.fontSize = null;
        }
        data.titleFontSize = a;
        if ((a = this$.style.titleSize) === 0) {
          a = data.titleFontSize + data.titleGap;
        } else if (typeof b === 'string') {
          b = el.nodeTitle[1].style;
          b.height = a;
          a = b.height;
          b.height = null;
        }
        data.titleSize = a;
        a = data.boxSize - data.panelsGap;
        if (a < data.titleSize * data.length) {
          data.titleSize = a / data.length;
        }
        a = data.titleSize - data.titleGap;
        if (data.titleFontSize > a) {
          data.titleFontSize = a;
        }
        resizePanels(data);
      };
      createResizeAnimation = function(sync, parent){
        var data, box, animSubPanel0, animPanel, animSubPanel1, animOrderFirst, a, b, c, i$, len$, el;
        sync == null && (sync = false);
        if (parent) {
          data = parent.panels;
          box = parent.nodeBox[1];
        } else {
          data = DATA;
          box = data[0].nodeParent;
        }
        stopAnimations(data);
        animSubPanel0 = [];
        animPanel = [];
        animSubPanel1 = [];
        animOrderFirst = [];
        if (!parent || (!parent.hidden && parent.active)) {
          a = null;
          if (parent && parent.hiddenTitle !== parent.nodeBox[0]['class'].has('hidden')) {
            a = parent.hiddenTitle
              ? parent.animation.hideTitle
              : parent.animation.showTitle;
          } else {
            b = box.style.titleSize - data.titleSize;
            c = box.style.titleFontSize - data.titleFontSize;
            if (Math.abs(b) > 0.001 || Math.abs(c) > 0.001) {
              a = b > 0 || c > 0
                ? this$.data.animation.shrink
                : this$.data.animation.enlarge;
              a[0].to.css['--title-size'] = data.titleSize + 'px';
              a[0].to.css['--title-font-size'] = data.titleFontSize + 'px';
            }
          }
          if (a) {
            b = new TimelineLite({
              paused: true
            });
            w3ui.GSAP.add(b, box.node, a);
            animPanel.push(b);
          }
        }
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          el = data[i$];
          a = null;
          if (sync) {
            c = el.nodePanel['class'];
            if (el.active !== c.has('active')) {
              if (el.active) {
                a = el.animation.activate;
                a[0].to.css['--panel-size'] = el.panelSize + 'px';
              } else {
                a = el.animation.deactivate;
                animOrderFirst.push(el.id);
              }
            } else if (el.hidden !== c.has('hidden')) {
              a = el.hidden
                ? el.animation.hide
                : el.animation.show;
            }
            while (this$.options.deepDive) {
              if (el.firstElement && el.lastElement) {
                break;
              }
              if (el.deepDived === (c.has('FIRST') && c.has('LAST'))) {
                break;
              }
              if (!el.firstElement) {
                b = 'FIRST';
                if (!el.lastElement) {
                  b = b + ' LAST';
                }
              } else {
                b = 'LAST';
              }
              c = el.animation.setClass;
              if (el.deepDived) {
                c[0].to.className = '+=' + b;
              } else {
                c[0].to.className = '-=' + b;
              }
              a = a ? a.concat(c) : c;
              break;
            }
          }
          if (el.active && !a) {
            a = el.panelSize - el.nodeBox[1].style.panelSize;
            if (Math.abs(a) > 0.001) {
              if (a > 0) {
                a = el.animation.enlarge;
              } else {
                a = el.animation.shrink;
                animOrderFirst.push(el.id);
              }
              a[0].to.css['--panel-size'] = el.panelSize + 'px';
            }
          }
          if (a) {
            b = new TimelineLite({
              paused: true
            });
            w3ui.GSAP.add(b, null, a);
            animPanel.push(b);
          }
        }
        animPanel = w3ui.GSAP.joinTimelines(animPanel);
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          el = data[i$];
          if (el.panels) {
            if (c = createResizeAnimation(sync, el)) {
              if (animOrderFirst.indexOf(el.id) < 0) {
                animSubPanel1.push(c);
              } else {
                animSubPanel0.push(c);
              }
            }
          }
        }
        animSubPanel0 = w3ui.GSAP.joinTimelines(animSubPanel0);
        animSubPanel1 = w3ui.GSAP.joinTimelines(animSubPanel1);
        a = [];
        if (animSubPanel0) {
          a.push(animSubPanel0.timeScale(1.5));
        }
        if (animPanel) {
          a.push(animPanel);
        }
        if (animSubPanel1) {
          a.push(animSubPanel1);
        }
        if (!a.length) {
          return null;
        }
        a = w3ui.GSAP.joinTimelines(a, true);
        return a;
      };
      unlockResizeAnimation = function(forced){
        var list, a;
        if (list = DATA.hovering) {
          if (forced && (a = list.animation)) {
            a.progress(1);
            delete list.animation;
          } else if (list.length && (a = createHoverAnimation(list))) {
            list.length = 0;
            a.add(unlockResizeAnimation);
            list.animation = a;
            a.play();
            return;
          } else if (list.animation) {
            delete list.animation;
          }
        }
        DATA.selecting = false;
      };
      create = function(){
        if (DATA.length) {
          createNodes(DATA, this$.options);
          initAnimations(DATA, this$.data.animation);
          this$.node.child.add(DATA[0].nodeParent);
        }
        return true;
      };
      destroy = function(){
        if (DATA.length) {
          this$.node.child.remove(DATA[0].nodeParent);
          DATA.length = 0;
          delete DATA.sizes;
        }
      };
      resize = function(){
        resizeInit(DATA);
        resizeContainer();
        return createResizeAnimation();
      };
      hover = function(id, state){
        var panel, a, b;
        if (!(panel = getItem(id, DATA))) {
          return;
        }
        if (panel.disabled || state === panel.hovered) {
          return;
        }
        panel.hovered = state;
        if (DATA.selecting) {
          if (!DATA.hovering) {
            DATA.hovering = [];
          }
          DATA.hovering.push(panel);
        } else {
          a = panel.animation;
          b = panel.hovered
            ? a.hover
            : a.unhover;
          a.hovering.kill().clear();
          a.hovering.add(b.invalidate().play());
        }
        /***
        # TODO
        # additional animation
        if @options.hoverMore
            # get adjacent panels
            panel = if panel.parent
                then panel.parent.panels
                else DATA
            # iterate
            for el in panel when not el.hidden and not el.disabled
                a = el.animation
                b = el.hovered
                # stop animation
                a.hover.kill!
                a.unhover.kill!
                # get target animation
                c = if b
                    then a.hover
                    else a.unhover
                # animate
                c.invalidate.play 0
        /***/
      };
      select = function(id){
        var panel, a, i$, ref$, len$, b, j$, len1$, c;
        if (!(panel = getItem(id, DATA))) {
          return;
        }
        if (panel.disabled || (!this$.options.multiSelect && panel.active && !this$.options.deactivation)) {
          return;
        }
        if (a = DATA.selecting) {
          if (a === true) {
            return;
          }
          a.progress(1);
          unlockResizeAnimation(true);
        }
        DATA.selecting = true;
        if (panel.active) {
          panel.active = false;
          if (this$.options.deactivateChildren && panel.panels) {
            for (i$ = 0, len$ = (ref$ = getItemList(panel.panels)).length; i$ < len$; ++i$) {
              b = ref$[i$];
              b.active = false;
              b.hidden = false;
              b.deepDived = false;
            }
          }
          if (this$.options.deepDive) {
            b = panel.parent ? panel.parent.panels : DATA;
            for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
              a = b[i$];
              a.hidden = false;
            }
            if (this$.options.deepDive > 1 && (a = panel.parent)) {
              a.hiddenTitle = false;
              if (this$.options.deepDive < 3 && (a = a.parent)) {
                a.hiddenTitle = false;
              }
            }
            panel.deepDived = false;
          }
        } else {
          panel.active = true;
          if (!this$.options.multiSelect) {
            b = panel.parent ? panel.parent.panels : DATA;
            for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
              a = b[i$];
              if (a.active && a !== panel) {
                a.active = false;
                a.hovered = false;
                if (a.panels && this$.options.deactivateChildren) {
                  a = getItemList(a.panels);
                  for (j$ = 0, len1$ = a.length; j$ < len1$; ++j$) {
                    c = a[j$];
                    c.active = false;
                    c.hovered = false;
                  }
                }
              }
            }
            if (this$.options.deepDive) {
              for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
                a = b[i$];
                if (a !== panel) {
                  a.hidden = true;
                }
              }
              if (this$.options.deepDive > 1 && (a = panel.parent)) {
                if (this$.options.deepDive > 2) {
                  do {
                    a.hiddenTitle = true;
                  } while (a = a.parent);
                } else {
                  if (a.parent) {
                    a.parent.hiddenTitle = true;
                  }
                }
              }
              panel.deepDived = true;
            }
          }
        }
        resizePanels(DATA);
        if (!(a = createResizeAnimation(true))) {
          DATA.selecting = false;
          return;
        }
        a.add(unlockResizeAnimation);
        DATA.selecting = a;
        a.play();
      };
      Object.defineProperty(this, 'panels', {
        get: function(){
          var api;
          api = w3ui.PROXY({
            create: create,
            destroy: destroy,
            resize: resize,
            hover: hover,
            select: select
          }, {
            get: function(api, key){
              if (key in api) {
                return api[key];
              }
              return key ? getItem(key, DATA) : DATA;
            }
          });
          return function(){
            return api;
          };
        }(),
        set: function(data){
          DATA = data && initData(data)
            ? data
            : [];
        }
      });
    };
  }()
});