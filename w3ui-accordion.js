// Generated by LiveScript 1.5.0
"use strict";
var toString$ = {}.toString;
w3ui && (w3ui.accordion = {
  options: {
    ORDER: ['panels', 'multiSelect', 'deactivation'],
    multiSelect: false,
    deepDive: true,
    deeperDive: true,
    deactivation: true,
    deactivateChildren: false,
    extraHover: false,
    extraActive: false,
    nextLevelSize: 1,
    events: {
      hover: null,
      unhover: null,
      select: null,
      selectComplete: null
    },
    panels: null
  },
  data: {
    INIT: ['panels'],
    animation: {
      hover: [
        {
          duration: 0.4,
          to: {
            className: '+=hovered',
            ease: Bounce.easeOut
          }
        }, {
          duration: 0.2,
          to: {
            className: '+=hovered',
            ease: Power2.easeOut
          }
        }, {
          position: 0,
          duration: 0.6,
          to: {
            className: '+=hovered',
            ease: Power2.easeOut
          }
        }
      ],
      unhover: [
        {
          duration: 0.4,
          to: {
            className: '-=hovered',
            ease: Power2.easeIn
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '-=hovered',
            ease: Power2.easeIn
          }
        }, {
          position: 0,
          duration: 0.4,
          to: {
            className: '-=hovered',
            ease: Power2.easeIn
          }
        }
      ],
      resize: [{
        duration: 0.4,
        to: {
          css: {},
          ease: Power2.easeInOut
        }
      }],
      activate: [
        {
          duration: 0,
          to: {
            css: {}
          }
        }, {
          duration: 0.2,
          to: {
            className: '+=active',
            ease: Power2.easeIn
          }
        }, {
          duration: 0.4,
          to: {
            className: '+=active',
            ease: Power1.easeOut
          }
        }, {
          position: '-=0.3',
          duration: 0.2,
          to: {
            className: '+=active',
            ease: Power2.easeIn
          }
        }
      ],
      deactivate: [
        {
          duration: 0.3,
          to: {
            className: '-=active',
            ease: Power2.easeIn
          }
        }, {
          position: '-=0.3',
          duration: 0.4,
          to: {
            className: '-=active',
            ease: Power1.easeIn
          }
        }, {
          duration: 0.2,
          to: {
            className: '-=active',
            ease: Power2.easeOut
          }
        }
      ],
      enlarge: [{
        duration: 0.4,
        to: {
          css: {},
          ease: Power2.easeOut
        }
      }],
      shrink: [{
        duration: 0.4,
        to: {
          css: {},
          ease: Power1.easeIn
        }
      }],
      show: [{
        duration: 0.4,
        to: {
          className: '-=hidden',
          ease: Power1.easeOut
        }
      }],
      hide: [{
        duration: 0.4,
        to: {
          className: '+=hidden',
          ease: Power1.easeIn
        }
      }]
    },
    events: [
      {
        id: 'hover',
        event: 'pointerenter',
        el: '.title'
      }, {
        id: 'unhover',
        event: 'pointerleave',
        el: '.title'
      }, {
        id: 'select',
        event: 'click',
        el: '.title'
      }
    ]
  },
  style: ['titleSize', 'titleFontSize', 'panelSize'],
  api: {
    none: true
  },
  create: function(){
    if (!this.panels.create()) {
      this.log('failed to create panels');
      return false;
    }
    return true;
  },
  resize: function(){
    var a;
    if (a = this.panels.resize()) {
      a.progress(1);
    }
  },
  setup: function(name, opt){
    switch (name) {
    case 'panels':
      this.panels = opt;
    }
    return opt;
  },
  animation: function(name){
    switch (name) {
    case 'resize':
      return this.panels.resize();
    }
    return null;
  },
  react: function(data, event){
    var id, a, b;
    switch (id = data.id) {
    case 'hover':
    case 'unhover':
      a = event.currentTarget.dataset.id;
      b = id === 'hover';
      this.panels.hover(a, b);
      break;
    case 'select':
      if (a = event.currentTarget.dataset.id) {
        this.panels.select(a);
      }
      break;
    default:
      return false;
    }
    return true;
  },
  panels: function(){
    var createNodes, initData, initDataSizes, initAnimations, getAnimation, stopAnimations, syncProp, getItem;
    createNodes = function(data, box){
      var i$, len$, index, el, a, b, c;
      if (!box) {
        box = w3ui(document.createElement('div'));
        box['class'].add('box');
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        a = Array(11).fill(0).map(fn$);
        el.nodeParent = box;
        el.nodePanel = w3ui(a[0]);
        el.nodeBox = w3ui([a[1], a[2]]);
        el.node = w3ui([a[3], a[4]]);
        el.nodeTitle = w3ui([a[5], a[6], a[7]]);
        el.nodeContent = w3ui([a[8], a[9], a[10]]);
        el.nodes = w3ui(a);
        el.node[0].child.add(el.nodeTitle);
        el.node[1].child.add(el.nodeContent);
        el.nodeBox[0].child.add(el.node[0]);
        el.nodeBox[1].child.add(el.node[1]);
        el.nodePanel.child.add(el.nodeBox);
        box.child.add(el.nodePanel);
        el.nodePanel['class'] = 'panel';
        el.nodeBox[0]['class'] = 'boxTitle';
        el.nodeBox[1]['class'] = 'boxContent';
        el.node[0]['class'] = 'title';
        el.node[1]['class'] = 'content';
        el.nodeTitle.forEach(fn1$);
        el.nodeContent.forEach(fn2$);
        if (el.hidden) {
          el.nodePanel['class'].add('hidden');
          el.active = false;
        }
        if (el.active) {
          el.nodes.classAdd('active');
        }
        if (el.disabled) {
          el.nodes.classAdd('disabled');
        }
        el.nodes.props.dataId = el.id;
        a = el.level % 2 === 0 ? 'EVEN' : 'ODD';
        el.nodes.classAdd(a);
        el.nodeTitle[1].html = el.title;
        if ('content' in el) {
          a = el.nodeContent;
          b = el.content;
          if (toString$.call(b).slice(8, -1) === 'Array') {
            if (b[0]) {
              a[0].html = b[0];
              a[0]['class'].add('N1');
            }
            if (b[2]) {
              a[2].html = b[2];
              a[2]['class'].add('N1');
            }
          } else if (!el.panels) {
            a[1].html = b;
          } else {
            a[0].html = b;
            a[0]['class'].add('N1');
          }
          a = el.nodeContent;
          b = [-1, -1];
          if (c = el.contentSize) {
            if (toString$.call(c).slice(8, -1) === 'Array') {
              if (c[0]) {
                b[0] = c[0];
              }
              if (c[1]) {
                b[1] = c[1];
              }
            } else {
              b[0] = c;
            }
          } else {
            if (a[0]['class'].has('N1')) {
              b[0] = 100 * a[0].outterHeight / size[3];
            }
            if (a[2]['class'].has('N1')) {
              b[1] = 100 * a[2].outterHeight / size[3];
            }
          }
          c = 100;
          if (b[0] >= 0) {
            a[0].style.height = b[0] + '%';
            c = c - b[0];
          }
          if (b[1] >= 0) {
            a[2].style.height = b[1] + '%';
            c = c - b[1];
          }
          a[1].style.height = c + '%';
        }
        if (el.panels) {
          createNodes(el.panels, el.nodeContent[1]);
        }
      }
      box['class'].add('L' + data[0].level);
      a = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (!el.hidden) {
          a.push(el);
        }
      }
      if (a.length) {
        a[0].nodePanel['class'].add('first');
        a[a.length - 1].nodePanel['class'].add('last');
      }
      function fn$(){
        return document.createElement('div');
      }
      function fn1$(el, index){
        el['class'] = 'box N' + index;
      }
      function fn2$(el, index){
        el['class'] = 'box N' + index;
      }
    };
    initData = function(data, parent){
      var i$, len$, index, el;
      parent == null && (parent = null);
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        el.parent = parent;
        el.level = parent ? parent.level + 1 : 0;
        el.animation = {};
        if (!el.id) {
          el.id = el.level + '#' + index;
        }
        el.hidden = !!el.hidden;
        el.active = !!el.active;
        el.disabled = !!el.disabled;
        if (el.panels && !initData(el.panels, el)) {
          return false;
        }
      }
      return true;
    };
    initDataSizes = function(data, size){
      var lst0, lst1, i$, len$, el, a, b, gap0, gap1, c, e, d, index;
      lst0 = [];
      lst1 = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (!el.hidden) {
          lst0.push(el);
          if (el.active) {
            lst1.push(el);
          }
        }
      }
      el = data[0];
      a = el.nodeBox[0].box;
      b = el.node[0].box;
      gap0 = a.borderHeight + a.paddingHeight + b.borderHeight + b.paddingHeight;
      if (a = el.parent) {
        a = a.nodeContent[1].box;
        gap1 = a.borderHeight + a.paddingHeight;
      } else {
        gap1 = 0;
      }
      for (i$ = 0, len$ = lst0.length; i$ < len$; ++i$) {
        el = lst0[i$];
        a = el.nodePanel.box;
        gap1 = gap1 + a.borderHeight + a.paddingHeight;
      }
      if ((a = size[0] - gap1) < 1) {
        a = 0;
      }
      b = size[1];
      if (b * lst0.length > a) {
        if ((b = a / lst0.length) < 1) {
          b = 0;
        }
      }
      c = size[2];
      if (c > b - gap0) {
        if ((c = b - gap0) < 1) {
          c = 0;
        }
      }
      e = [a - b * lst0.length, 0];
      d = data.map(function(el, index){
        var x;
        if (!el.active || el.hidden) {
          return 0;
        }
        if (el.panelSize) {
          x = el.panelSize * a / 100.0;
        } else {
          x = e[0] / lst1.length;
        }
        if (x < 1) {
          x = 0;
        }
        e[1] = e[1] + x;
        return x;
      });
      e = e[0] - e[1];
      if (Math.abs(e > 1)) {
        d = d.map(function(x){
          return x < 1 || x + e < 0
            ? 0
            : x + e;
        });
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        el.size = [d[index], b, c];
      }
      for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
        el = lst1[i$];
        if (el.panels) {
          initDataSizes(el.panels, el.size);
        }
      }
    };
    initAnimations = function(data, animation){
      var i$, len$, el, a, b;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        for (a in animation) {
          b = animation[a];
          el.animation[a] = getAnimation(el, a, animation);
        }
        if (el.panels) {
          initAnimations(el.panels, animation);
        }
      }
    };
    getAnimation = function(el, animName, animData){
      var a, b;
      a = w3ui.CLONE(animData[animName]);
      switch (animName) {
      case 'hover':
      case 'unhover':
        a[0].node = el.nodeTitle.nodes;
        a[1].node = el.nodeContent.nodes;
        a[2].node = el.node.nodes.concat(el.nodePanel.nodes);
        b = new TimelineLite({
          paused: true,
          overwrite: 0,
          autoCSS: false
        });
        w3ui.GSAP.add(b, null, a);
        a = b;
        break;
      case 'activate':
        a[0].node = el.nodeBox[1].node;
        a[1].node = el.nodePanel.nodes.concat([el.nodeBox[0].node], el.node.nodes, el.nodeTitle.nodes);
        a[2].node = el.nodeBox[1].node;
        a[3].node = el.nodeContent.nodes;
        break;
      case 'deactivate':
        a[0].node = el.nodeContent.nodes;
        a[1].node = el.nodeBox[1].node;
        a[2].node = el.nodePanel.nodes.concat([el.nodeBox[0].node], el.node.nodes, el.nodeTitle.nodes);
        break;
      case 'resize':
      case 'enlarge':
      case 'shrink':
        a[0].node = el.nodeBox[1].node;
        break;
      case 'show':
      case 'hide':
        a[0].node = el.nodes.nodes;
      }
      return a;
    };
    stopAnimations = function(data){
      var i$, len$, el, a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        a = el.animation;
        if (a.hover.isActive() || a.unhover.isActive()) {
          if (el.hovered) {
            a.unhover.kill();
            a.hover.progress(1);
          } else {
            a.hover.kill();
            a.unhover.progress(1);
          }
        }
      }
    };
    syncProp = function(el, prop, parent){
      var i$, len$, a, ref$;
      if (parent) {
        if (typeof prop === 'string') {
          el[prop] = parent[prop];
        } else {
          for (i$ = 0, len$ = prop.length; i$ < len$; ++i$) {
            a = prop[i$];
            el[a] = parent[a];
          }
        }
      }
      if (el.panels) {
        for (i$ = 0, len$ = (ref$ = el.panels).length; i$ < len$; ++i$) {
          a = ref$[i$];
          syncProp(a, prop, el);
        }
      }
    };
    getItem = function(id, data){
      var i$, len$, el, a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.id === id) {
          return el;
        }
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.panels) {
          if (a = getItem(id, el.panels)) {
            return a;
          }
        }
      }
      return null;
    };
    return function(){
      var DATA, refreshSizes, createResizeAnimation, create, destroy, resize, hover, select, this$ = this;
      DATA = [];
      refreshSizes = function(){
        var el, d, a, c, b, e;
        el = DATA[0];
        d = el.nodeTitle[1].style;
        if ((a = el.nodeParent.box.innerHeight) < 1) {
          a = 0;
        }
        if ((c = this$.style.titleFontSize) === 0) {
          c = this$.node.style.fontSize;
        } else if (typeof c === 'string') {
          d.fontSize = c;
          c = d.fontSize;
          d.fontSize = null;
        }
        if ((b = this$.style.titleSize) === 0) {
          b = c;
        } else if (typeof b === 'string') {
          d.height = a;
          a = d.height;
          d.height = null;
        }
        d = el.nodeBox[0].box;
        e = el.node[0].box;
        d = d.borderHeight + d.paddingHeight + e.borderHeight + e.paddingHeight;
        if (b < c + d) {
          b = c + d;
        }
        DATA.sizes = [a, b, c];
        initDataSizes(DATA, DATA.sizes);
      };
      createResizeAnimation = function(sync, parent){
        var data, box, animSubPanel0, animPanel, animSubPanel1, animOrderFirst, c, a, b, i$, len$, el;
        sync == null && (sync = false);
        if (parent) {
          data = parent.panels;
          box = parent.nodeBox[1];
        } else {
          data = DATA;
          box = data[0].nodeParent;
        }
        stopAnimations(data);
        animSubPanel0 = [];
        animPanel = [];
        animSubPanel1 = [];
        animOrderFirst = [];
        if (!parent || (!parent.hidden && parent.active)) {
          c = data[0].size;
          a = box.style.titleSize - c[1];
          b = box.style.titleFontSize - c[2];
          if (Math.abs(a) > 0.001 || Math.abs(b) > 0.001) {
            a = a > 0 || b > 0
              ? this$.data.animation.shrink
              : this$.data.animation.enlarge;
            a[0].to.css['--title-size'] = c[1] + 'px';
            a[0].to.css['--title-font-size'] = c[2] + 'px';
            b = new TimelineLite({
              paused: true,
              overwrite: 0,
              autoCSS: false
            });
            w3ui.GSAP.add(b, box.node, a);
            animPanel.push(b);
          }
        }
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          el = data[i$];
          a = null;
          b = el.nodePanel['class'];
          if (sync && el.active !== b.has('active')) {
            if (el.active) {
              a = el.animation.activate;
              a[0].to.css['--panel-size'] = el.size[0] + 'px';
            } else {
              a = el.animation.deactivate;
              animOrderFirst.push(el.id);
            }
          } else if (el.active) {
            a = el.size[0] - el.nodeBox[1].style.panelSize;
            if (Math.abs(a) > 0.001) {
              if (a > 0) {
                a = el.animation.enlarge;
              } else {
                a = el.animation.shrink;
                animOrderFirst.push(el.id);
              }
              a[0].to.css['--panel-size'] = el.size[0] + 'px';
            }
          } else if (sync && el.hidden !== b.has('hidden')) {
            a = el.hidden
              ? el.animation.hide
              : el.animation.show;
          }
          if (!a) {
            continue;
          }
          b = new TimelineLite({
            paused: true,
            overwrite: 0,
            autoCSS: false
          });
          w3ui.GSAP.add(b, null, a);
          animPanel.push(b);
        }
        animPanel = w3ui.GSAP.joinTimelines(animPanel);
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          el = data[i$];
          if (el.panels) {
            if (c = createResizeAnimation(sync, el)) {
              if (animOrderFirst.indexOf(el.id) < 0) {
                animSubPanel1.push(c);
              } else {
                animSubPanel0.push(c);
              }
            }
          }
        }
        animSubPanel0 = w3ui.GSAP.joinTimelines(animSubPanel0);
        animSubPanel1 = w3ui.GSAP.joinTimelines(animSubPanel1);
        a = [];
        if (animSubPanel0) {
          a.push(animSubPanel0);
        }
        if (animPanel) {
          a.push(animPanel);
        }
        if (animSubPanel1) {
          a.push(animSubPanel1);
        }
        if (!a.length) {
          return null;
        }
        a = w3ui.GSAP.joinTimelines(a, true);
        return a;
      };
      create = function(){
        var a;
        if (DATA.length) {
          createNodes(DATA);
          initAnimations(DATA, this$.data.animation);
          a = new TimelineLite({
            overflow: 0,
            autoCSS: false
          });
          a.autoRemoveChildren = true;
          a.smoothChildTiming = true;
          DATA.animation = a;
          this$.node.child.add(DATA[0].nodeParent);
        }
        return true;
      };
      destroy = function(){
        if (DATA.length) {
          this$.node.child.remove(DATA[0].nodeParent);
          DATA.length = 0;
          delete DATA.sizes;
        }
      };
      resize = function(){
        refreshSizes();
        return createResizeAnimation();
      };
      hover = function(id, state){
        var panel, a;
        if (!(panel = getItem(id, DATA))) {
          return;
        }
        if (panel.disabled || state === panel.hovered) {
          return;
        }
        panel.hovered = state;
        if (DATA.locked || DATA.animation.isActive()) {
          if (panel.hovering) {
            return;
          }
          panel.hovering = true;
          DATA.animation.add(function(){
            var a, b;
            a = panel.hovered;
            b = panel.nodePanel['class'].has('hovered');
            if (a !== b) {
              a = a
                ? getAnimation(panel, 'hover', this$.data.animation)
                : getAnimation(panel, 'unhover', this$.data.animation);
              DATA.animation.add(a.play());
            }
            delete panel.hovering;
          });
          if (!DATA.animation.isActive()) {
            DATA.animation.play();
          }
        } else {
          if (panel.hovering) {
            delete panel.hovering;
          }
          a = panel.animation;
          if (panel.hovered) {
            a.unhover.kill();
            a.hover.invalidate().play(0);
          } else {
            a.hover.kill();
            a.unhover.invalidate().play(0);
          }
        }
        /***
        if @options.hoverMore
            # get adjacent panels
            panel = if panel.parent
                then panel.parent.panels
                else DATA
            # iterate
            for el in panel when not el.hidden and not el.disabled
                a = el.animation
                b = el.hovered
                # stop animation
                a.hover.kill!
                a.unhover.kill!
                # get target animation
                c = if b
                    then a.hover
                    else a.unhover
                # animate
                c.invalidate.play 0
        /***/
      };
      select = function(id){
        var panel, b, i$, len$, a;
        if (!(panel = getItem(id, DATA))) {
          return;
        }
        if (panel.disabled || DATA.locked) {
          return;
        }
        if (!this$.options.multiSelect && panel.active && !this$.options.deactivation) {
          return;
        }
        DATA.locked = true;
        if (panel.active) {
          panel.active = false;
          if (panel.panels && this$.options.deactivateChildren) {
            syncProp(panel, 'active');
          }
          if (this$.options.deepDive) {
            b = panel.parent ? panel.parent.panels : DATA;
            for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
              a = b[i$];
              if (a !== panel) {
                a.hidden = false;
              }
            }
          }
        } else {
          panel.active = true;
          if (!this$.options.multiSelect) {
            b = panel.parent ? panel.parent.panels : DATA;
            for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
              a = b[i$];
              if (a.active && a !== panel) {
                a.active = false;
                a.hovered = false;
                if (a.panels && this$.options.deactivateChildren) {
                  syncProp(a, ['active', 'hovered']);
                }
              }
            }
            if (this$.options.deepDive) {
              for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
                a = b[i$];
                if (a !== panel) {
                  a.hidden = true;
                }
              }
              if (this$.options.deeperDive && (b = a.parent) && (b = b.parent)) {
                b.hiddenTitle = true;
              }
            }
          }
        }
        refreshSizes();
        if (DATA.animation.isActive()) {
          DATA.animation.progress(1);
        }
        DATA.animation.add(function(){
          var a;
          if (a = createResizeAnimation(true)) {
            a.add(function(){
              DATA.locked = false;
            });
            DATA.animation.add(a.play());
          }
        });
        DATA.animation.play();
      };
      Object.defineProperty(this, 'panels', {
        get: function(){
          var api;
          api = w3ui.PROXY({
            create: create,
            destroy: destroy,
            resize: resize,
            hover: hover,
            select: select
          }, {
            get: function(api, key){
              if (key in api) {
                return api[key];
              }
              return key ? getItem(key, DATA) : DATA;
            }
          });
          return function(){
            return api;
          };
        }(),
        set: function(data){
          DATA = data && initData(data)
            ? data
            : [];
        }
      });
    };
  }()
});